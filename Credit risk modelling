{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SreeLakshmi1242/SreeLakshmi1242/blob/main/Credit%20risk%20modelling\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "associate-sunset",
      "metadata": {
        "id": "associate-sunset"
      },
      "source": [
        "# Advanced Certification Program in Computational Data Science\n",
        "## A program by IISc and TalentSprint\n",
        "### Mini-Project: Credit risk modelling using Logistic Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "handled-tooth",
      "metadata": {
        "id": "handled-tooth"
      },
      "source": [
        "## Problem Statement"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "accessory-watts",
      "metadata": {
        "id": "accessory-watts"
      },
      "source": [
        "Predict the loan defaulters using a Logistic Regression model on the credit risk data and calculate credit scores"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "twenty-indonesia",
      "metadata": {
        "id": "twenty-indonesia"
      },
      "source": [
        "## Learning Objectives"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "honest-friendship",
      "metadata": {
        "id": "honest-friendship"
      },
      "source": [
        "At the end of the mini-project, you will be able to :\n",
        "\n",
        "* perform data exploration, preprocessing and visualization\n",
        "* implement Logistic Regression using manual code or using sklearn library\n",
        "* evaluate the model using appropriate performance metrics\n",
        "* develop a credit scoring system"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "lesbian-bottom",
      "metadata": {
        "id": "lesbian-bottom"
      },
      "source": [
        "## Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fixed-trainer",
      "metadata": {
        "id": "fixed-trainer"
      },
      "source": [
        "The dataset chosen for this mini-project is the [Give Me Some Credit](https://cdn.iisc.talentsprint.com/CDS/Give_me_some_credit_BigML.pdf) dataset which can be used to build models for predicting loan repayment defaulters\n",
        "#### Datafields\n",
        "\n",
        "- **SeriousDlqin2yrs:** Person experienced 90 days past due delinquency or worse\n",
        "- **RevolvingUtilizationOfUnsecuredLines:** Total balance on credit cards and personal lines of credit except real estate and no installment debt like car loans divided by the sum of credit limits\n",
        "- **age:** Age of borrower in years\n",
        "- **NumberOfTime30-59DaysPastDueNotWorse:** Number of times borrower has been 30-59 days past due but no worse in the last 2 years.\n",
        "- **DebtRatio:** Monthly debt payments, alimony,living costs divided by monthy gross income\n",
        "- **MonthlyIncome:** Monthly income\n",
        "- **NumberOfOpenCreditLinesAndLoans:** Number of Open loans (installment like car loan or mortgage) and Lines of credit (e.g. credit cards)\n",
        "- **NumberOfTimes90DaysLate:** Number of times borrower has been 90 days or more past due.\n",
        "- **NumberRealEstateLoansOrLines:**\tNumber of mortgage and real estate loans including home equity lines of credit\n",
        "- **NumberOfTime60-89DaysPastDueNotWorse:**\tNumber of times borrower has been 60-89 days past due but no worse in the last 2 years.\n",
        "- **NumberOfDependents:** Number of dependents in family excluding themselves (spouse, children etc.)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "rapid-hierarchy",
      "metadata": {
        "id": "rapid-hierarchy"
      },
      "source": [
        "## Information"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "prescribed-matter",
      "metadata": {
        "id": "prescribed-matter"
      },
      "source": [
        "Credit risk arises when a corporate or individual borrower fails to meet their debt obligations. From the lender's perspective, credit risk could disrupt its cash flows or increase collection costs, since the lender may be forced to hire a debt collection agency to enforce the collection. The loss may be partial or complete, where the lender incurs a loss of part of the loan or the entire loan extended to the borrower.\n",
        "\n",
        "Credit scoring algorithms, which calculate the probability of default, are the best methods that banks use to determine whether or not a loan should be granted.\n",
        "\n",
        "In order to build a credit scoring system, the following feature transformations are performed:\n",
        "\n",
        "#### Weight of Evidence and Information value\n",
        "\n",
        "Logistic regression is a commonly used technique in credit scoring for solving binary classification problems. Prior to model fitting, another iteration of variable selection is valuable to check if the newly WOE transformed variables are still good model candidates. Preferred candidate variables are those with higher information value having a linear relationship with the dependent variable, have good coverage across all categories, have a normal distribution, contain a notable overall contribution, and are relevant to the business.\n",
        "\n",
        "**Weight of evidence** (WOE) is a powerful tool for feature representation and evaluation in data science. WOE can provide interpret able transformation to both categorical and numerical features. The weight of evidence tells the predictive power of an independent variable in relation to the dependent variable. Since it evolved from credit scoring world, it is generally described as a measure of the separation of good and bad customers. \"Bad Customers\" refers to the customers who defaulted on a loan. and \"Good Customers\" refers to the customers who paid back loan. WOE can be calculated using the below formula:\n",
        "\n",
        "$$WOE = ln \\left( \\frac{\\%   of  Non\\_Events}{\\%   of  Events} \\right)$$\n",
        "\n",
        "Steps to calculate WOE\n",
        "* For a continuous variable, split data into 10 parts (or lesser depending on the distribution).\n",
        "* Calculate the number of events and non-events in each group (bin)\n",
        "* Calculate the % of events and % of non-events in each group.\n",
        "* Calculate WOE by taking natural log of division of % of non-events and % of events\n",
        "\n",
        "**Information value** is one of the most useful technique to select important variables in a predictive model. It helps to rank variables on the basis of their importance. The IV is calculated using the following formula :\n",
        "$$IV = ∑ (\\% of Non\\_Events - \\% of Events) * WOE$$\n",
        "\n",
        "Read more about `WOE` and `IV` from the following [link](https://cdn.iisc.talentsprint.com/CDS/Assignments/Module2/M2_NB_MiniProject_2_Credit_risk_modelling_Logistic_Regression_WoE_and_IV.pdf)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "operating-latter",
      "metadata": {
        "id": "operating-latter"
      },
      "source": [
        "## Grading = 10 Points"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "caring-syndrome",
      "metadata": {
        "id": "caring-syndrome"
      },
      "source": [
        "### Download the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "comparable-delay",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "comparable-delay",
        "outputId": "1aec6a43-3e79-4ad4-b833-c0176c4859f4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.0/13.0 MB\u001b[0m \u001b[31m20.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "cudf-cu12 24.4.1 requires pandas<2.2.2dev0,>=2.0, but you have pandas 2.2.2 which is incompatible.\n",
            "google-colab 1.0.0 requires pandas==2.0.3, but you have pandas 2.2.2 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mData Downloaded Successfully!\n"
          ]
        }
      ],
      "source": [
        "#@title Download Dataset\n",
        "!wget -qq https://cdn.iisc.talentsprint.com/CDS/MiniProjects/GiveMeSomeCredit.csv\n",
        "!pip -qq install xverse\n",
        "print(\"Data Downloaded Successfully!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5nHbUGBPFdIC",
      "metadata": {
        "id": "5nHbUGBPFdIC"
      },
      "source": [
        "### Install Packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "vtWdOla0dLJr",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "vtWdOla0dLJr",
        "outputId": "8bf7b162-6e41-48a6-d7ae-204c4e2bd969"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xverse in /usr/local/lib/python3.10/dist-packages (1.0.5)\n",
            "Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.10/dist-packages (from xverse) (1.25.2)\n",
            "Requirement already satisfied: scikit-learn>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from xverse) (1.2.2)\n",
            "Requirement already satisfied: scipy>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from xverse) (1.11.4)\n",
            "Requirement already satisfied: statsmodels>=0.6.1 in /usr/local/lib/python3.10/dist-packages (from xverse) (0.14.2)\n",
            "Requirement already satisfied: pandas>=0.21.1 in /usr/local/lib/python3.10/dist-packages (from xverse) (2.2.2)\n",
            "Requirement already satisfied: matplotlib>=3.0.3 in /usr/local/lib/python3.10/dist-packages (from xverse) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.0.3->xverse) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.21.1->xverse) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.21.1->xverse) (2024.1)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.19.0->xverse) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.19.0->xverse) (3.5.0)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.6.1->xverse) (0.5.6)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.6->statsmodels>=0.6.1->xverse) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install xverse"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "jc2WLiGnFg-p",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "collapsed": true,
        "id": "jc2WLiGnFg-p",
        "outputId": "b0d3eae1-251d-4657-f001-0a6f58b50f97"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pandas==1.3.5\n",
            "  Using cached pandas-1.3.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.5 MB)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.10/dist-packages (from pandas==1.3.5) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.10/dist-packages (from pandas==1.3.5) (2023.4)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas==1.3.5) (1.25.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7.3->pandas==1.3.5) (1.16.0)\n",
            "Installing collected packages: pandas\n",
            "  Attempting uninstall: pandas\n",
            "    Found existing installation: pandas 2.2.2\n",
            "    Uninstalling pandas-2.2.2:\n",
            "      Successfully uninstalled pandas-2.2.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "bigframes 1.11.1 requires pandas>=1.5.0, but you have pandas 1.3.5 which is incompatible.\n",
            "cudf-cu12 24.4.1 requires pandas<2.2.2dev0,>=2.0, but you have pandas 1.3.5 which is incompatible.\n",
            "google-colab 1.0.0 requires pandas==2.0.3, but you have pandas 1.3.5 which is incompatible.\n",
            "plotnine 0.12.4 requires pandas>=1.5.0, but you have pandas 1.3.5 which is incompatible.\n",
            "statsmodels 0.14.2 requires pandas!=2.1.0,>=1.4, but you have pandas 1.3.5 which is incompatible.\n",
            "xarray 2023.7.0 requires pandas>=1.4, but you have pandas 1.3.5 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed pandas-1.3.5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "pandas"
                ]
              },
              "id": "7aac63169a164f40bda93d0e9de357a5"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "!pip install pandas==1.3.5"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "appreciated-pattern",
      "metadata": {
        "id": "appreciated-pattern"
      },
      "source": [
        "### Import Neccesary Packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "loose-marsh",
      "metadata": {
        "id": "loose-marsh"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import metrics\n",
        "import seaborn as sns\n",
        "from matplotlib import pyplot as plt\n",
        "import math\n",
        "from xverse.transformer import MonotonicBinning,WOE\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "compressed-reflection",
      "metadata": {
        "id": "compressed-reflection"
      },
      "source": [
        "### Load the dataset\n",
        "Presenter-Vikas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "gEb76qwPhDGR",
      "metadata": {
        "id": "gEb76qwPhDGR"
      },
      "outputs": [],
      "source": [
        "df=pd.read_csv('GiveMeSomeCredit.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "hUENQC7xhH7m",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hUENQC7xhH7m",
        "outputId": "0f452697-1476-432b-c9d3-17d486967cb6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0                                int64\n",
              "SeriousDlqin2yrs                          int64\n",
              "RevolvingUtilizationOfUnsecuredLines    float64\n",
              "age                                       int64\n",
              "NumberOfTime30-59DaysPastDueNotWorse      int64\n",
              "DebtRatio                               float64\n",
              "MonthlyIncome                           float64\n",
              "NumberOfOpenCreditLinesAndLoans           int64\n",
              "NumberOfTimes90DaysLate                   int64\n",
              "NumberRealEstateLoansOrLines              int64\n",
              "NumberOfTime60-89DaysPastDueNotWorse      int64\n",
              "NumberOfDependents                      float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 155
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "L-XZtmXwhTdd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        },
        "id": "L-XZtmXwhTdd",
        "outputId": "e7468716-51a8-4d93-a9f8-4130256d6790"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  SeriousDlqin2yrs  RevolvingUtilizationOfUnsecuredLines  age  \\\n",
              "0           1                 1                              0.766127   45   \n",
              "1           2                 0                              0.957151   40   \n",
              "2           3                 0                              0.658180   38   \n",
              "3           4                 0                              0.233810   30   \n",
              "4           5                 0                              0.907239   49   \n",
              "\n",
              "   NumberOfTime30-59DaysPastDueNotWorse  DebtRatio  MonthlyIncome  \\\n",
              "0                                     2   0.802982         9120.0   \n",
              "1                                     0   0.121876         2600.0   \n",
              "2                                     1   0.085113         3042.0   \n",
              "3                                     0   0.036050         3300.0   \n",
              "4                                     1   0.024926        63588.0   \n",
              "\n",
              "   NumberOfOpenCreditLinesAndLoans  NumberOfTimes90DaysLate  \\\n",
              "0                               13                        0   \n",
              "1                                4                        0   \n",
              "2                                2                        1   \n",
              "3                                5                        0   \n",
              "4                                7                        0   \n",
              "\n",
              "   NumberRealEstateLoansOrLines  NumberOfTime60-89DaysPastDueNotWorse  \\\n",
              "0                             6                                     0   \n",
              "1                             0                                     0   \n",
              "2                             0                                     0   \n",
              "3                             0                                     0   \n",
              "4                             1                                     0   \n",
              "\n",
              "   NumberOfDependents  \n",
              "0                 2.0  \n",
              "1                 1.0  \n",
              "2                 0.0  \n",
              "3                 0.0  \n",
              "4                 0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48d37e8f-f639-4e54-9d0a-c51a8f45431c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>SeriousDlqin2yrs</th>\n",
              "      <th>RevolvingUtilizationOfUnsecuredLines</th>\n",
              "      <th>age</th>\n",
              "      <th>NumberOfTime30-59DaysPastDueNotWorse</th>\n",
              "      <th>DebtRatio</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>NumberOfOpenCreditLinesAndLoans</th>\n",
              "      <th>NumberOfTimes90DaysLate</th>\n",
              "      <th>NumberRealEstateLoansOrLines</th>\n",
              "      <th>NumberOfTime60-89DaysPastDueNotWorse</th>\n",
              "      <th>NumberOfDependents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.766127</td>\n",
              "      <td>45</td>\n",
              "      <td>2</td>\n",
              "      <td>0.802982</td>\n",
              "      <td>9120.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.957151</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0.121876</td>\n",
              "      <td>2600.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.658180</td>\n",
              "      <td>38</td>\n",
              "      <td>1</td>\n",
              "      <td>0.085113</td>\n",
              "      <td>3042.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0.233810</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>0.036050</td>\n",
              "      <td>3300.0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0.907239</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>0.024926</td>\n",
              "      <td>63588.0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48d37e8f-f639-4e54-9d0a-c51a8f45431c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48d37e8f-f639-4e54-9d0a-c51a8f45431c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48d37e8f-f639-4e54-9d0a-c51a8f45431c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4dfc17aa-cff1-4783-81ef-6a4fccf95de9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4dfc17aa-cff1-4783-81ef-6a4fccf95de9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4dfc17aa-cff1-4783-81ef-6a4fccf95de9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 156
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "zkpv4p0nkE9u",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zkpv4p0nkE9u",
        "outputId": "ffb1d9d4-4ae9-46ce-ae9d-f0184065c9b1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.06684\n"
          ]
        }
      ],
      "source": [
        "per_non_defaulters=df[df['SeriousDlqin2yrs']==0].shape[0]/df['SeriousDlqin2yrs'].shape[0]\n",
        "per_defaulters=df[df['SeriousDlqin2yrs']==1].shape[0]/df['SeriousDlqin2yrs'].shape[0]\n",
        "print(per_defaulters)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "experienced-sleeping",
      "metadata": {
        "id": "experienced-sleeping"
      },
      "source": [
        "#### Describe the all statistical properties of the train dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "greek-methodology",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "id": "greek-methodology",
        "outputId": "e9ef20dd-6964-4319-bfcc-f3695f787ce2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Unnamed: 0  SeriousDlqin2yrs  RevolvingUtilizationOfUnsecuredLines  \\\n",
              "count  150000.000000     150000.000000                         150000.000000   \n",
              "mean    75000.500000          0.066840                              6.048438   \n",
              "std     43301.414527          0.249746                            249.755371   \n",
              "min         1.000000          0.000000                              0.000000   \n",
              "25%     37500.750000          0.000000                              0.029867   \n",
              "50%     75000.500000          0.000000                              0.154181   \n",
              "75%    112500.250000          0.000000                              0.559046   \n",
              "max    150000.000000          1.000000                          50708.000000   \n",
              "\n",
              "                 age  NumberOfTime30-59DaysPastDueNotWorse      DebtRatio  \\\n",
              "count  150000.000000                         150000.000000  150000.000000   \n",
              "mean       52.295207                              0.421033     353.005076   \n",
              "std        14.771866                              4.192781    2037.818523   \n",
              "min         0.000000                              0.000000       0.000000   \n",
              "25%        41.000000                              0.000000       0.175074   \n",
              "50%        52.000000                              0.000000       0.366508   \n",
              "75%        63.000000                              0.000000       0.868254   \n",
              "max       109.000000                             98.000000  329664.000000   \n",
              "\n",
              "       MonthlyIncome  NumberOfOpenCreditLinesAndLoans  \\\n",
              "count   1.202690e+05                    150000.000000   \n",
              "mean    6.670221e+03                         8.452760   \n",
              "std     1.438467e+04                         5.145951   \n",
              "min     0.000000e+00                         0.000000   \n",
              "25%     3.400000e+03                         5.000000   \n",
              "50%     5.400000e+03                         8.000000   \n",
              "75%     8.249000e+03                        11.000000   \n",
              "max     3.008750e+06                        58.000000   \n",
              "\n",
              "       NumberOfTimes90DaysLate  NumberRealEstateLoansOrLines  \\\n",
              "count            150000.000000                 150000.000000   \n",
              "mean                  0.265973                      1.018240   \n",
              "std                   4.169304                      1.129771   \n",
              "min                   0.000000                      0.000000   \n",
              "25%                   0.000000                      0.000000   \n",
              "50%                   0.000000                      1.000000   \n",
              "75%                   0.000000                      2.000000   \n",
              "max                  98.000000                     54.000000   \n",
              "\n",
              "       NumberOfTime60-89DaysPastDueNotWorse  NumberOfDependents  \n",
              "count                         150000.000000       146076.000000  \n",
              "mean                               0.240387            0.757222  \n",
              "std                                4.155179            1.115086  \n",
              "min                                0.000000            0.000000  \n",
              "25%                                0.000000            0.000000  \n",
              "50%                                0.000000            0.000000  \n",
              "75%                                0.000000            1.000000  \n",
              "max                               98.000000           20.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb3f7a24-795d-4e93-9b28-a3f226085630\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>SeriousDlqin2yrs</th>\n",
              "      <th>RevolvingUtilizationOfUnsecuredLines</th>\n",
              "      <th>age</th>\n",
              "      <th>NumberOfTime30-59DaysPastDueNotWorse</th>\n",
              "      <th>DebtRatio</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>NumberOfOpenCreditLinesAndLoans</th>\n",
              "      <th>NumberOfTimes90DaysLate</th>\n",
              "      <th>NumberRealEstateLoansOrLines</th>\n",
              "      <th>NumberOfTime60-89DaysPastDueNotWorse</th>\n",
              "      <th>NumberOfDependents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>1.202690e+05</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>146076.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>75000.500000</td>\n",
              "      <td>0.066840</td>\n",
              "      <td>6.048438</td>\n",
              "      <td>52.295207</td>\n",
              "      <td>0.421033</td>\n",
              "      <td>353.005076</td>\n",
              "      <td>6.670221e+03</td>\n",
              "      <td>8.452760</td>\n",
              "      <td>0.265973</td>\n",
              "      <td>1.018240</td>\n",
              "      <td>0.240387</td>\n",
              "      <td>0.757222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>43301.414527</td>\n",
              "      <td>0.249746</td>\n",
              "      <td>249.755371</td>\n",
              "      <td>14.771866</td>\n",
              "      <td>4.192781</td>\n",
              "      <td>2037.818523</td>\n",
              "      <td>1.438467e+04</td>\n",
              "      <td>5.145951</td>\n",
              "      <td>4.169304</td>\n",
              "      <td>1.129771</td>\n",
              "      <td>4.155179</td>\n",
              "      <td>1.115086</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>37500.750000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.029867</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.175074</td>\n",
              "      <td>3.400000e+03</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>75000.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.154181</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.366508</td>\n",
              "      <td>5.400000e+03</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>112500.250000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.559046</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.868254</td>\n",
              "      <td>8.249000e+03</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>150000.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>50708.000000</td>\n",
              "      <td>109.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>329664.000000</td>\n",
              "      <td>3.008750e+06</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>20.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb3f7a24-795d-4e93-9b28-a3f226085630')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb3f7a24-795d-4e93-9b28-a3f226085630 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb3f7a24-795d-4e93-9b28-a3f226085630');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dd56b62f-969b-4b6f-8415-688f7496c0b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd56b62f-969b-4b6f-8415-688f7496c0b9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dd56b62f-969b-4b6f-8415-688f7496c0b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54060.42093734011,\n        \"min\": 1.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          150000.0,\n          75000.5,\n          112500.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SeriousDlqin2yrs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53032.94209248323,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.06684,\n          1.0,\n          0.24974553092871982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RevolvingUtilizationOfUnsecuredLines\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53483.00135780071,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.048438054666888,\n          0.154180737,\n          150000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53016.24668669193,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52.295206666666665,\n          52.0,\n          150000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTime30-59DaysPastDueNotWorse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53027.83674301857,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4210333333333333,\n          98.0,\n          4.192781272018315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DebtRatio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 120792.23821428795,\n        \"min\": 0.0,\n        \"max\": 329664.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          353.00507576386985,\n          0.366507841,\n          150000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MonthlyIncome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1056515.0220149714,\n        \"min\": 0.0,\n        \"max\": 3008750.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6670.221237392844,\n          5400.0,\n          120269.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfOpenCreditLinesAndLoans\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53028.18331237868,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.45276,\n          8.0,\n          150000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTimes90DaysLate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53027.845767158105,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.26597333333333334,\n          98.0,\n          4.169303787594445\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberRealEstateLoansOrLines\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53030.024427663826,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          150000.0,\n          1.01824,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfTime60-89DaysPastDueNotWorse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53027.84777425715,\n        \"min\": 0.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.24038666666666667,\n          98.0,\n          4.1551794209872215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumberOfDependents\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51644.510312044025,\n        \"min\": 0.0,\n        \"max\": 146076.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          146076.0,\n          0.7572222678605657,\n          20.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 159
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ippkKj_Z0_vw",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ippkKj_Z0_vw",
        "outputId": "2bc24171-e067-4600-e279-0d4dc488a13a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3321\n"
          ]
        }
      ],
      "source": [
        "count = (df['RevolvingUtilizationOfUnsecuredLines'] > 1).sum()\n",
        "print(count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Hm7KQzeF2mFR",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hm7KQzeF2mFR",
        "outputId": "5027f24c-b89f-400d-8e0e-8fc246d0e8bc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of outliers: 528\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Calculate Q1 (25th percentile) and Q3 (75th percentile)\n",
        "Q1 = df['RevolvingUtilizationOfUnsecuredLines'].quantile(0.25)\n",
        "Q3 = df['RevolvingUtilizationOfUnsecuredLines'].quantile(0.75)\n",
        "\n",
        "# Calculate the IQR\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Calculate the lower and upper bounds for outliers\n",
        "lower_bound = Q1 - 2 * IQR\n",
        "upper_bound = Q3 + 2 * IQR\n",
        "\n",
        "# Identify outliers\n",
        "outliers = df[(df['RevolvingUtilizationOfUnsecuredLines'] < lower_bound) | (df['RevolvingUtilizationOfUnsecuredLines'] > upper_bound)]\n",
        "\n",
        "# Count the number of outliers\n",
        "outliers_count = outliers.shape[0]\n",
        "\n",
        "print(f\"Number of outliers: {outliers_count}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "KDwuJWWj74dJ",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KDwuJWWj74dJ",
        "outputId": "8ae364ea-060f-4894-bc17-4be6eb0d0cec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.24242424242424243\n"
          ]
        }
      ],
      "source": [
        "per_non_defaulters=outliers[outliers['SeriousDlqin2yrs']==0].shape[0]/outliers['SeriousDlqin2yrs'].shape[0]\n",
        "per_defaulters=outliers[outliers['SeriousDlqin2yrs']==1].shape[0]/outliers['SeriousDlqin2yrs'].shape[0]\n",
        "print(per_defaulters)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "rleJD5U783KP",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rleJD5U783KP",
        "outputId": "54d0fc27-81b9-49cb-cab5-1b678410d7b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(149472, 12)\n"
          ]
        }
      ],
      "source": [
        "df = df[(df['RevolvingUtilizationOfUnsecuredLines'] >= lower_bound) & (df['RevolvingUtilizationOfUnsecuredLines'] <= upper_bound)]\n",
        "print(df.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "christian-hamilton",
      "metadata": {
        "id": "christian-hamilton"
      },
      "source": [
        "### Pre-processing (1 point)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "global-decision",
      "metadata": {
        "id": "global-decision"
      },
      "source": [
        "#### Remove unwanted columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "pharmaceutical-latvia",
      "metadata": {
        "id": "pharmaceutical-latvia"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE\n",
        "df.drop(columns=['Unnamed: 0'],inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "usual-elimination",
      "metadata": {
        "id": "usual-elimination"
      },
      "source": [
        "#### Handle the missing data\n",
        "\n",
        "Find the how many null values in the dataset and fill with mean or remove."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "heated-findings",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "heated-findings",
        "outputId": "f0fa2ed0-9852-45e0-ffc1-6a0663269b42"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SeriousDlqin2yrs                            0\n",
              "RevolvingUtilizationOfUnsecuredLines        0\n",
              "age                                         0\n",
              "NumberOfTime30-59DaysPastDueNotWorse        0\n",
              "DebtRatio                                   0\n",
              "MonthlyIncome                           29604\n",
              "NumberOfOpenCreditLinesAndLoans             0\n",
              "NumberOfTimes90DaysLate                     0\n",
              "NumberRealEstateLoansOrLines                0\n",
              "NumberOfTime60-89DaysPastDueNotWorse        0\n",
              "NumberOfDependents                       3905\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 165
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "zwKp67WwKGbK",
      "metadata": {
        "id": "zwKp67WwKGbK"
      },
      "outputs": [],
      "source": [
        "# Fill missing values in MonthlyIncome with the mean\n",
        "df['MonthlyIncome'].fillna(df['MonthlyIncome'].mean(), inplace=True)\n",
        "\n",
        "# Fill missing values in NumberOfDependents with the mean\n",
        "df['NumberOfDependents'].fillna(df['NumberOfDependents'].mean(), inplace=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "hispanic-reply",
      "metadata": {
        "id": "hispanic-reply"
      },
      "source": [
        "### EDA &  Visualization ( 1 point)\n",
        "Presenter- Amit"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7LkMe_Sw4j6d",
      "metadata": {
        "id": "7LkMe_Sw4j6d"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "standing-cheese",
      "metadata": {
        "id": "standing-cheese"
      },
      "source": [
        "#### Calculate the percentage of the target lebels and visualize with a graph"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "attractive-hands",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "attractive-hands",
        "outputId": "ea1fac4f-e803-4b50-d04f-c3bfafe87fcc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjIAAAHHCAYAAACle7JuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABAL0lEQVR4nO3de3zP9f//8ft7B9tsNoxtaLZhjslhjpHTplWIkPgo41P4hHLo6FPOZ2VEISqjT30qOXQQfVhSlpAkSrNkJhmlbIZt7P38/dF3719vm8Pepu1Vt+vl8r7U6/l6vp6vx/s177l7vZ6v19tmjDECAACwILeSLgAAAMBVBBkAAGBZBBkAAGBZBBkAAGBZBBkAAGBZBBkAAGBZBBkAAGBZBBkAAGBZBBkAAGBZBBkAlrJhwwY1btxY3t7estlsOnXqVEmX9JeQkJAgm82mL774otjGnDhxomw2W7GNBxSGIIO/rfxf3Pkvb29v1a5dWyNGjNDx48dLurxr9u2332rixIlKTU0t6VKKzcmTJ9WnTx/5+PjohRde0KuvvipfX98C/f74c73c6+OPP/7z38RlfPbZZ5o4ceJVh7OBAwfKz8/v+hYFlHIeJV0AUNImT56siIgIZWdna+vWrVq0aJE++OAD7du3T2XLli3p8lz27bffatKkSerQoYPCw8NLupxisXPnTp0+fVpTpkxRTEzMJfu9+uqrTssrVqzQxo0bC7TXq1fvutTpqs8++0yTJk3SwIEDVb58+ZIuB7AEggz+9m6//XY1a9ZMkvTAAw8oMDBQ8fHxeuedd9SvX79rGvvs2bOWDkOlzYkTJyTpin/J33vvvU7Ln3/+uTZu3Fig3RXGGGVnZ8vHx+eaxwJw7bi0BFykU6dOkqRDhw452v7zn/8oKipKPj4+qlixovr27asjR444bdehQwfdeOON2rVrl9q1a6eyZcvq3//+tyQpOztbEydOVO3ateXt7a0qVaqoZ8+eOnjwoGN7u92uefPmqUGDBvL29lZwcLCGDh2q3377zWk/4eHh6tq1q7Zu3aoWLVrI29tbNWrU0IoVKxx9EhISdPfdd0uSOnbsWOBSyjvvvKMuXbqoatWq8vLyUs2aNTVlyhTl5eUVOB4vvPCCatSoIR8fH7Vo0UKffvqpOnTooA4dOjj1y8nJ0YQJE1SrVi15eXkpNDRUjz/+uHJycq7quK9cudJxjCtVqqR7771XR48edTq+cXFxkqTmzZvLZrNp4MCBVzV2YZYtW6ZOnTopKChIXl5eql+/vhYtWlSgX/7x/vDDD9WsWTP5+PjoxRdflCQdPnxYd955p3x9fRUUFKTRo0frww8/LPSy1fbt23XbbbcpICBAZcuWVfv27ZWUlORYP3HiRD322GOSpIiICMfP7FovDR4+fFjDhg1TnTp15OPjo8DAQN19992XHPfs2bMaOnSoAgMD5e/vrwEDBhT4MyhJ69ev1y233CJfX1+VK1dOXbp00TfffHPFejZu3Ki2bduqfPny8vPzU506dRyfE8AVnJEBLpIfLgIDAyVJ06ZN07hx49SnTx898MAD+vnnn7VgwQK1a9dOu3fvdjo7cPLkSd1+++3q27ev7r33XgUHBysvL09du3ZVYmKi+vbtq5EjR+r06dPauHGj9u3bp5o1a0qShg4dqoSEBA0aNEgPP/ywDh06pOeff167d+9WUlKSPD09Hfv5/vvv1bt3b91///2Ki4vTK6+8ooEDByoqKkoNGjRQu3bt9PDDD2v+/Pn697//7biEkv/fhIQE+fn5acyYMfLz89NHH32k8ePHKzMzU88884xjP4sWLdKIESN0yy23aPTo0UpNTVWPHj1UoUIF3XDDDY5+drtdd955p7Zu3aohQ4aoXr162rt3r+bOnasDBw5o7dq1lz3m+e+7efPmmjFjho4fP67nnntOSUlJjmP81FNPqU6dOlqyZInjcmD+sXPFokWL1KBBA915553y8PDQe++9p2HDhslut2v48OFOfZOTk9WvXz8NHTpUgwcPVp06dXTmzBl16tRJx44d08iRIxUSEqLXX39dmzdvLrCvjz76SLfffruioqI0YcIEubm5OYLUp59+qhYtWqhnz546cOCA/vvf/2ru3LmqVKmSJKly5couv0fp98txn332mfr27asbbrhBqampWrRokTp06KBvv/22wBnDESNGqHz58po4caKSk5O1aNEiHT58WB9//LFj4u6rr76quLg4xcbGatasWTp79qwWLVqktm3bavfu3Ze8lPnNN9+oa9euuummmzR58mR5eXnp+++/dwp0QJEZ4G9q2bJlRpLZtGmT+fnnn82RI0fMG2+8YQIDA42Pj4/58ccfTWpqqnF3dzfTpk1z2nbv3r3Gw8PDqb19+/ZGklm8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avv27Vq9erWysrIk/f4VBRMmTCjWAgEAAC7FpSDz5JNPaurUqdq4caPKlCnjaO/UqZM+//zzYisOAADgclwKMnv37tVdd91VoD0oKEi//PLLNRcFAABwNVwKMuXLl9exY8cKtO/evVvVqlVzqZCZM2fKZrNp1KhRjrbs7GwNHz5cgYGB8vPzU69evXT8+HGXxgcAAH89LgWZvn376oknnlB6erpsNpvsdruSkpL06KOPasCAAUUeb+fOnXrxxRd10003ObWPHj1a7733nlauXKktW7bop59+Us+ePV0pGQAA/AW5FGSmT5+uevXqqXr16srKylL9+vXVrl073XzzzXr66aeLNFZWVpb69++vpUuXqkKFCo72jIwMvfzyy4qPj1enTp0UFRWlZcuW6bPPPmMeDgAAkFTE58jY7XY988wzevfdd5Wbm6v77rtPvXr1UlZWlpo0aeLSF0gOHz5cXbp0UUxMjKZOnepo37Vrl86fP6+YmBhHW926dVW9enVt27ZNrVq1KnS8nJwc5eTkOJYzMzOLXBMAALCGIgWZadOmaeLEiYqJiZGPj49ef/11GWP0yiuvuLTzN954Q19++aV27txZYF16errKlCmj8uXLO7UHBwcrPT39kmPOmDFDkyZNcqkeAABgLUW6tLRixQotXLhQH374odauXav33ntPr732mux2e5F3fOTIEY0cOVKvvfaavL29i7z9pYwdO1YZGRmO15EjR4ptbAAAULoUKcikpaXpjjvucCzHxMTIZrPpp59+KvKOd+3apRMnTqhp06by8PCQh4eHtmzZovnz58vDw0PBwcHKzc3VqVOnnLY7fvy4QkJCLjmul5eX/P39nV4AAOCvqUiXli5cuFDg7Imnp6fOnz9f5B1HR0dr7969Tm2DBg1S3bp19cQTTyg0NFSenp5KTExUr169JEnJyclKS0tT69ati7w/AADw11OkIGOM0cCBA+Xl5eVoy87O1r/+9S/5+vo62lavXn3FscqVK6cbb7zRqc3X11eBgYGO9vvvv19jxoxRxYoV5e/vr4ceekitW7e+5ERfAADw91KkIFPYt17fe++9xVbMxebOnSs3Nzf16tVLOTk5io2N1cKFC6/b/gAAgLXYjDGmpIu4njIzMxUQEKCMjIxiny8T/uS6Yh0P+KtJndmlpEsAYFFX+/e3Sw/EAwAAKA0IMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLIIMgAAwLJKNMjMmDFDzZs3V7ly5RQUFKQePXooOTnZqU92draGDx+uwMBA+fn5qVevXjp+/HgJVQwAAEqTEg0yW7Zs0fDhw/X5559r48aNOn/+vG699VadOXPG0Wf06NF67733tHLlSm3ZskU//fSTevbsWYJVAwCA0sKjJHe+YcMGp+WEhAQFBQVp165dateunTIyMvTyyy/r9ddfV6dOnSRJy5YtU7169fT555+rVatWJVE2AAAoJUrVHJmMjAxJUsWKFSVJu3bt0vnz5xUTE+PoU7duXVWvXl3btm0rdIycnBxlZmY6vQAAwF9TqQkydrtdo0aNUps2bXTjjTdKktLT01WmTBmVL1/eqW9wcLDS09MLHWfGjBkKCAhwvEJDQ6936QAAoISUmiAzfPhw7du3T2+88cY1jTN27FhlZGQ4XkeOHCmmCgEAQGlTonNk8o0YMULvv/++PvnkE91www2O9pCQEOXm5urUqVNOZ2WOHz+ukJCQQsfy8vKSl5fX9S4ZAACUAiV6RsYYoxEjRmjNmjX66KOPFBER4bQ+KipKnp6eSkxMdLQlJycrLS1NrVu3/rPLBQAApUyJnpEZPny4Xn/9db3zzjsqV66cY95LQECAfHx8FBAQoPvvv19jxoxRxYoV5e/vr4ceekitW7fmjiUAAFCyQWbRokWSpA4dOji1L1u2TAMHDpQkzZ07V25uburVq5dycnIUGxurhQsX/smVAgCA0qhEg4wx5op9vL299cILL+iFF174EyoCAABWUmruWgIAACgqggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsggwAALAsj5IuAABKu/An15V0CUCplTqzS4nunzMyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsggyAADAsiwRZF544QWFh4fL29tbLVu21I4dO0q6JAAAUAqU+iDz5ptvasyYMZowYYK+/PJLNWrUSLGxsTpx4kRJlwYAAEpYqQ8y8fHxGjx4sAYNGqT69etr8eLFKlu2rF555ZWSLg0AAJSwUh1kcnNztWvXLsXExDja3NzcFBMTo23btpVgZQAAoDTwKOkCLueXX35RXl6egoODndqDg4P13XffFbpNTk6OcnJyHMsZGRmSpMzMzGKvz55zttjHBP5KrsfnriTwWQcu7Xp9zvPHNcZctl+pDjKumDFjhiZNmlSgPTQ0tASqAf7eAuaVdAUArrfr/Tk/ffq0AgICLrm+VAeZSpUqyd3dXcePH3dqP378uEJCQgrdZuzYsRozZoxj2W6369dff1VgYKBsNtt1rRclKzMzU6GhoTpy5Ij8/f1LuhwA1wGf878PY4xOnz6tqlWrXrZfqQ4yZcqUUVRUlBITE9WjRw9JvweTxMREjRgxotBtvLy85OXl5dRWvnz561wpShN/f39+wQF/cXzO/x4udyYmX6kOMpI0ZswYxcXFqVmzZmrRooXmzZunM2fOaNCgQSVdGgAAKGGlPsjcc889+vnnnzV+/Hilp6ercePG2rBhQ4EJwAAA4O+n1AcZSRoxYsQlLyUB+by8vDRhwoQClxYB/HXwOcfFbOZK9zUBAACUUqX6gXgAAACXQ5ABAACWRZABAACWRZDBX0p6ero6d+4sX1/fYn1+0MCBAx3PMgJwbZYsWaLQ0FC5ublp3rx5xTJmamqqbDabvvrqq2IZD9ZBkIEGDhwom82mmTNnOrWvXbv2uj8NOf+XT/6rXLlyatCggYYPH66UlJQijzd37lwdO3ZMX331lQ4cOHAdKv5dhw4dNGrUqOs2PlDa5P+esNls8vT0VHBwsDp37qxXXnlFdrv9qsfJzMzUiBEj9MQTT+jo0aMaMmTIdan3448/ls1m06lTp67L+Cg9CDKQJHl7e2vWrFn67bffSmT/mzZt0rFjx7Rnzx5Nnz5d+/fvV6NGjZSYmFikcQ4ePKioqChFRkYqKCjoOlVbfHJzc0u6BOCq3XbbbTp27JhSU1O1fv16dezYUSNHjlTXrl114cKFqxojLS1N58+fV5cuXVSlShWVLVv2Old9bYwxV/3eUDIIMpAkxcTEKCQkRDNmzLhkn1WrVqlBgwby8vJSeHi45syZ47Q+PDxc06dP1z//+U+VK1dO1atX15IlS65q/4GBgQoJCVGNGjXUvXt3bdq0SS1bttT999+vvLw8R7933nlHTZs2lbe3t2rUqKFJkyY5fsmEh4dr1apVWrFihWw2mwYOHChJio+PV8OGDeXr66vQ0FANGzZMWVlZjjEnTpyoxo0bO9Uzb948hYeHF1rrwIEDtWXLFj333HOOf6GmpqZKkvbt26fbb79dfn5+Cg4O1n333adffvnFsW2HDh00YsQIjRo1SpUqVVJsbKyMMZo4caKqV68uLy8vVa1aVQ8//PBVHTfgz+Tl5aWQkBBVq1ZNTZs21b///W+98847Wr9+vRISEiRJp06d0gMPPKDKlSvL399fnTp10p49eyRJCQkJatiwoSSpRo0ajs/OwYMH1b17dwUHB8vPz0/NmzfXpk2bnPZts9m0du1ap7by5cs79vtHqamp6tixoySpQoUKTr8P7Ha7ZsyYoYiICPn4+KhRo0Z6++23Hdvmn8lZv369oqKi5OXlpa1bt2rPnj3q2LGjypUrJ39/f0VFRemLL74ohqOKa0WQgSTJ3d1d06dP14IFC/Tjjz8WWL9r1y716dNHffv21d69ezVx4kSNGzeuwC+ROXPmqFmzZtq9e7eGDRumBx98UMnJyUWux83NTSNHjtThw4e1a9cuSdKnn36qAQMGaOTIkfr222/14osvKiEhQdOmTZMk7dy5U7fddpv69OmjY8eO6bnnnnOMNX/+fH3zzTdavny5PvroIz3++ONFrinfc889p9atW2vw4ME6duyYjh07ptDQUJ06dUqdOnVSkyZN9MUXX2jDhg06fvy4+vTp47T98uXLVaZMGSUlJWnx4sVatWqV5s6dqxdffFEpKSlau3at45c9UNp16tRJjRo10urVqyVJd999t06cOKH169dr165datq0qaKjo/Xrr7/qnnvucQSUHTt2OD47WVlZuuOOO5SYmKjdu3frtttuU7du3ZSWluZSTaGhoVq1apUkKTk52en3wYwZM7RixQotXrxY33zzjUaPHq17771XW7ZscRrjySef1MyZM7V//37ddNNN6t+/v2644Qbt3LlTu3bt0pNPPilPT09XDxuKk8HfXlxcnOnevbsxxphWrVqZf/7zn8YYY9asWWPy/4j84x//MJ07d3ba7rHHHjP169d3LIeFhZl7773XsWy3201QUJBZtGjRJfd96NAhI8ns3r27wLr9+/cbSebNN980xhgTHR1tpk+f7tTn1VdfNVWqVHEsd+/e3cTFxV32/a5cudIEBgY6lidMmGAaNWrk1Gfu3LkmLCzMsfzHY2SMMe3btzcjR4502mbKlCnm1ltvdWo7cuSIkWSSk5Md2zVp0sSpz5w5c0zt2rVNbm7uZesGStLFn4E/uueee0y9evXMp59+avz9/U12drbT+po1a5oXX3zRGGPM7t27jSRz6NChy+6vQYMGZsGCBY5lSWbNmjVOfQICAsyyZcuMMQV/l2zevNlIMr/99pujf3Z2tilbtqz57LPPnMa5//77Tb9+/Zy2W7t2rVOfcuXKmYSEhMvWjJLBGRk4mTVrlpYvX679+/c7te/fv19t2rRxamvTpo1SUlKcLv3cdNNNjv+32WwKCQnRiRMnJMlxycXPz08NGjS4Yi3m/x46nT/heM+ePZo8ebJjDD8/P8dZkbNnz15ynE2bNik6OlrVqlVTuXLldN999+nkyZOX3cYVe/bs0ebNm53qq1u3rqTf5+7ki4qKctru7rvv1rlz51SjRg0NHjxYa9as4Zo8LMUYI5vN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awgyAIokKytLd9xxhxITE7V7927ddttt6tatm9LS0pz6Pfvss2rUqJF2796tcePGKSkpSf/61780cuRIffXVV+rcubOmTZvmtM2nn36qAQMGaOTIkfr222/14osvKiEhwdFv586dkqRly5bp2LFjjuWiys7OVlRUlNatW6d9+/ZpyJAhuu+++7Rjxw6nfsuXL5eHh4d27Nih5557TvHx8XrppZcc60eMGKFt27bpjTfe0Ndff627775bt912m1JSUlyqC4ALSvhLKwGUcsuWLTMBAQGX7dOgQQOzYMECx3JYWJjp0aOHU5977rnHdOnSxamtf//+TmNHR0eb6dOnO/V59dVXTZUqVRzLksyaNWuuWPfV9svXpUsX88gjjziW27dvb+rVq+f45nJjjHniiSdMvXr1jDHGHD582Li7u5ujR486jRMdHW3Gjh1rjLm6Ywfg2jBHBkCRZGVlaeLEiVq3bp2OHTumCxcu6Ny5cwXOyDRr1sxpOTk5WXfddZdTW4sWLfT+++87lvfs2aOkpCSnMzV5eXnKzs7W2bNnVbZs2WJ5D3l5eZo+fbreeustHT16VLm5ucrJySkwfqtWrWSz2RzLrVu31pw5c5SXl6e9e/cqLy9PtWvXdtomJydHgYGBxVIngCsjyAAokkcffVQbN27Us88+q1q1asnHx0e9e/dWbm6uUz9fX98ij52VlaVJkyapZ8+eBdZ5e3u7XPPFnnnmGT333HOaN2+eGjZsKF9fX40aNarAe7hSre7u7tq1a5fc3d2d1hV1MjQA1xFkABRJUlKSBg4c6Di7kpWVpdTU1CtuV6dOnQJzWi5ebtq0qZKTk1WrVq1LjuPp6am8vLyiF/4HSUlJ6t69u+69915Jkt1u14EDB1S/fn2nftu3b3da/vzzzxUZGSl3d3c1adJEeXl5OnHihG655ZZrqgeA6wgyAIokMjJSq1evVrdu3WSz2TRu3DjZ7fYrbvfQQw+pXbt2io+PV7du3fTRRx9p/fr1Tpduxo8fr65du6p69erq3bu33NzctGfPHu3bt09Tp06V9PudS4mJiWrTpo28vLxUoUKFS+7z0KFD+uqrrwrUHxkZqbffflufffaZKlSooPj4eB0/frxAkElLS9OYMWM0dOhQffnll1qwYIHmzJkjSapdu7b69++vAQMGaM6cOWrSpIl+/vlnJSYm6qabblKXLl2u9pACuAbctQSgSOLj41WhQgXdfPPN6tatm2JjY9W0adMrbtemTRstXrxY8fHxatSokTZs2KDRo0c7XTKKjY3V+++/r//9739q3ry5WrVqpblz5yosLMzRZ86cOdq4caNCQ0PVpEmTy+5zzJgxatKkidNr9+7devrpp9W0aVPFxsaqQ4cOCgkJUY8ePQpsP2DAAJ07d04tWrTQ8OHDNXLkSMet5NLvd08NGDBAjzzyiOrUqaMePXpo586dql69+lUcSQDFwWbMHx6KAAB/osGDB+u7777Tp59+WtKlALAoLi0B+NM8++yz6ty5s3x9fbV+/XotX75cCxcuLOmyAFgYZ2QA/Gn69Omjjz/+WKdPn1aNGjX00EMP6V//+ldJlwXAwggyAADAspjsCwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALIsgAwAALOv/AaXBB7gYy45WAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "\n",
        "# Calculate the percentage of target labels\n",
        "target_counts = df['SeriousDlqin2yrs'].value_counts()\n",
        "target_percentage = target_counts / target_counts.sum() * 100\n",
        "\n",
        "# Visualize with a bar chart\n",
        "plt.bar(target_percentage.index, target_percentage.values)\n",
        "plt.xlabel('Target Label')\n",
        "plt.ylabel('Percentage')\n",
        "plt.title('Percentage of Target Labels')\n",
        "plt.xticks([0, 1], ['Non-Defaulters', 'Defaulters'])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "satisfactory-stopping",
      "metadata": {
        "id": "satisfactory-stopping"
      },
      "source": [
        "#### Plot the distribution of SeriousDlqin2yrs by age"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "multiple-series",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "multiple-series",
        "outputId": "4da4fda9-2331-4ed5-db06-fda639eed054"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "# YOUR CODE HERE\n",
        "sns.histplot(data=df, x='age', hue='SeriousDlqin2yrs', kde=True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "promotional-rolling",
      "metadata": {
        "id": "promotional-rolling"
      },
      "source": [
        "#### Calculate the correlation and plot the heatmap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "studied-candidate",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 991
        },
        "id": "studied-candidate",
        "outputId": "9442add9-467a-450d-9fb5-70d4b0b6de1c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 169
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "# Calculate the correlation matrix\n",
        "correlation_matrix = df.corr()\n",
        "\n",
        "# Plot the heatmap\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "operational-minute",
      "metadata": {
        "id": "operational-minute"
      },
      "source": [
        "### Data Engineering (2 points)\n",
        "Presenter- Raghu"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "outer-telephone",
      "metadata": {
        "id": "outer-telephone"
      },
      "source": [
        "#### Weight of Evidence and Information value\n",
        "\n",
        "* Arrange the binning for each variable with different bins\n",
        "    * For eg. Age = 49, Age_quantile_range = (48, 56)\n",
        "* Calculate information value and chooose the best features based on the rules given below\n",
        "\n",
        "| Information Value |\tVariable Predictiveness |\n",
        "| --- | --- |\n",
        "| Less than 0.02\t|  Not useful for prediction |\n",
        "| 0.02 to 0.1\t| Weak predictive Power |\n",
        "|  0.1 to 0.3 | Medium predictive Power |\n",
        "| 0.3 to 0.5 | Strong predictive Power |\n",
        "| >0.5 | Suspicious Predictive Power |\n",
        "\n",
        "* Calculate Weight of evidence for the selected variables\n",
        "\n",
        "Hint: Use [xverse](https://cdn.iisc.talentsprint.com/CDS/Assignments/Module2/M2_NB_MiniProject_2_Credit_risk_modelling_Logistic_Regression_Xverse.pdf). It is a machine learning Python module in the space of feature engineering, feature transformation and feature selection. It provides pre-built functions for the above steps, such as binning and conversion to WoE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ordered-knock",
      "metadata": {
        "id": "ordered-knock"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE\n",
        "# Assigning Features / Target\n",
        "Y = df['SeriousDlqin2yrs']\n",
        "X = df.drop('SeriousDlqin2yrs',  axis = 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "qJIE6Ax6SmFZ",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qJIE6Ax6SmFZ",
        "outputId": "ddbb9e36-5656-4fe5-c862-b278d6cbadcf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'RevolvingUtilizationOfUnsecuredLines': array([0.        , 0.05397889, 0.37562671, 1.6139686 ]), 'age': array([  0.,  45.,  59., 109.]), 'NumberOfTime30-59DaysPastDueNotWorse': array([ 0.,  1., 98.]), 'DebtRatio': array([0.00000000e+00, 2.38177005e-01, 5.69625158e-01, 3.29664000e+05]), 'MonthlyIncome': array([      0.       ,    4700.       ,    6668.9763907, 3008750.       ]), 'NumberOfOpenCreditLinesAndLoans': array([ 0.,  6., 10., 58.]), 'NumberOfTimes90DaysLate': array([ 0.,  1., 98.]), 'NumberRealEstateLoansOrLines': array([ 0.,  1., 54.]), 'NumberOfTime60-89DaysPastDueNotWorse': array([ 0.,  1., 98.]), 'NumberOfDependents': array([ 0.,  1., 20.])}\n"
          ]
        }
      ],
      "source": [
        "# Creating Bins\n",
        "from xverse.transformer import MonotonicBinning\n",
        "clf = MonotonicBinning()\n",
        "clf.fit(X , Y)\n",
        "print(clf.bins)\n",
        "out_x=clf.transform(X)\n",
        "output_bins = clf.bins"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "duCk8ZyIiCQl",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "duCk8ZyIiCQl",
        "outputId": "3dddddb2-a7e4-419e-a9ac-1e5e22b1dd82"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           Variable_Name               Category   Count  \\\n",
              "0   RevolvingUtilizationOfUnsecuredLines        (-0.001, 0.054]   49824   \n",
              "1   RevolvingUtilizationOfUnsecuredLines         (0.054, 0.376]   49824   \n",
              "2   RevolvingUtilizationOfUnsecuredLines         (0.376, 1.614]   49824   \n",
              "3                                    age         (-0.001, 45.0]   51035   \n",
              "4                                    age           (45.0, 59.0]   50220   \n",
              "5                                    age          (59.0, 109.0]   48217   \n",
              "6   NumberOfTime30-59DaysPastDueNotWorse          (-0.001, 1.0]  141592   \n",
              "7   NumberOfTime30-59DaysPastDueNotWorse            (1.0, 98.0]    7880   \n",
              "8                              DebtRatio        (-0.001, 0.238]   49824   \n",
              "9                              DebtRatio          (0.238, 0.57]   49824   \n",
              "10                             DebtRatio       (0.57, 329664.0]   49824   \n",
              "11                         MonthlyIncome       (-0.001, 4700.0]   50101   \n",
              "12                         MonthlyIncome     (4700.0, 6668.976]   55360   \n",
              "13                         MonthlyIncome  (6668.976, 3008750.0]   44011   \n",
              "14       NumberOfOpenCreditLinesAndLoans          (-0.001, 6.0]   59861   \n",
              "15       NumberOfOpenCreditLinesAndLoans            (6.0, 10.0]   46658   \n",
              "16       NumberOfOpenCreditLinesAndLoans           (10.0, 58.0]   42953   \n",
              "17               NumberOfTimes90DaysLate          (-0.001, 1.0]  146457   \n",
              "18               NumberOfTimes90DaysLate            (1.0, 98.0]    3015   \n",
              "19          NumberRealEstateLoansOrLines          (-0.001, 1.0]  108124   \n",
              "20          NumberRealEstateLoansOrLines            (1.0, 54.0]   41348   \n",
              "21  NumberOfTime60-89DaysPastDueNotWorse          (-0.001, 1.0]  147639   \n",
              "22  NumberOfTime60-89DaysPastDueNotWorse            (1.0, 98.0]    1833   \n",
              "23                    NumberOfDependents          (-0.001, 1.0]  116749   \n",
              "24                    NumberOfDependents            (1.0, 20.0]   32723   \n",
              "\n",
              "    Event  Non_Event  Event_Rate  Non_Event_Rate  Event_Distribution  \\\n",
              "0     873      48951    0.017522        0.982478            0.088200   \n",
              "1    1540      48284    0.030909        0.969091            0.155587   \n",
              "2    7485      42339    0.150229        0.849771            0.756213   \n",
              "3    4943      46092    0.096855        0.903145            0.499394   \n",
              "4    3469      46751    0.069076        0.930924            0.350475   \n",
              "5    1486      46731    0.030819        0.969181            0.150131   \n",
              "6    7357     134235    0.051959        0.948041            0.743281   \n",
              "7    2541       5339    0.322462        0.677538            0.256719   \n",
              "8    2977      46847    0.059750        0.940250            0.300768   \n",
              "9    3133      46691    0.062881        0.937119            0.316529   \n",
              "10   3788      46036    0.076028        0.923972            0.382704   \n",
              "11   4364      45737    0.087104        0.912896            0.440897   \n",
              "12   3402      51958    0.061452        0.938548            0.343706   \n",
              "13   2132      41879    0.048442        0.951558            0.215397   \n",
              "14   4585      55276    0.076594        0.923406            0.463225   \n",
              "15   2570      44088    0.055082        0.944918            0.259648   \n",
              "16   2743      40210    0.063860        0.936140            0.277127   \n",
              "17   8244     138213    0.056290        0.943710            0.832896   \n",
              "18   1654       1361    0.548590        0.451410            0.167104   \n",
              "19   7314     100810    0.067645        0.932355            0.738937   \n",
              "20   2584      38764    0.062494        0.937506            0.261063   \n",
              "21   8929     138710    0.060479        0.939521            0.902101   \n",
              "22    969        864    0.528642        0.471358            0.097899   \n",
              "23   7121     109628    0.060994        0.939006            0.719438   \n",
              "24   2777      29946    0.084864        0.915136            0.280562   \n",
              "\n",
              "    Non_Event_Distribution       WOE  Information_Value  \n",
              "0                 0.350717 -1.380377           0.928150  \n",
              "1                 0.345938 -0.799056           0.928150  \n",
              "2                 0.303344  0.913455           0.928150  \n",
              "3                 0.330233  0.413595           0.218791  \n",
              "4                 0.334955  0.045293           0.218791  \n",
              "5                 0.334812 -0.802058           0.218791  \n",
              "6                 0.961748 -0.257678           0.472206  \n",
              "7                 0.038252  1.903782           0.472206  \n",
              "8                 0.335643 -0.109709           0.012682  \n",
              "9                 0.334525 -0.055298           0.012682  \n",
              "10                0.329832  0.148677           0.012682  \n",
              "11                0.327690  0.296744           0.063931  \n",
              "12                0.372261 -0.079810           0.063931  \n",
              "13                0.300049 -0.331462           0.063931  \n",
              "14                0.396034  0.156713           0.021977  \n",
              "15                0.315875 -0.196020           0.021977  \n",
              "16                0.288091 -0.038801           0.021977  \n",
              "17                0.990249 -0.173048           0.474308  \n",
              "18                0.009751  2.841239           0.474308  \n",
              "19                0.722269  0.022815           0.001412  \n",
              "20                0.277731 -0.061891           0.001412  \n",
              "21                0.993810 -0.096819           0.262081  \n",
              "22                0.006190  2.760954           0.262081  \n",
              "23                0.785447 -0.087782           0.023500  \n",
              "24                0.214553  0.268238           0.023500  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-82a2d70c-d0a1-4333-b111-ce2d3977acd4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Variable_Name</th>\n",
              "      <th>Category</th>\n",
              "      <th>Count</th>\n",
              "      <th>Event</th>\n",
              "      <th>Non_Event</th>\n",
              "      <th>Event_Rate</th>\n",
              "      <th>Non_Event_Rate</th>\n",
              "      <th>Event_Distribution</th>\n",
              "      <th>Non_Event_Distribution</th>\n",
              "      <th>WOE</th>\n",
              "      <th>Information_Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(-0.001, 0.054]</td>\n",
              "      <td>49824</td>\n",
              "      <td>873</td>\n",
              "      <td>48951</td>\n",
              "      <td>0.017522</td>\n",
              "      <td>0.982478</td>\n",
              "      <td>0.088200</td>\n",
              "      <td>0.350717</td>\n",
              "      <td>-1.380377</td>\n",
              "      <td>0.928150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(0.054, 0.376]</td>\n",
              "      <td>49824</td>\n",
              "      <td>1540</td>\n",
              "      <td>48284</td>\n",
              "      <td>0.030909</td>\n",
              "      <td>0.969091</td>\n",
              "      <td>0.155587</td>\n",
              "      <td>0.345938</td>\n",
              "      <td>-0.799056</td>\n",
              "      <td>0.928150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(0.376, 1.614]</td>\n",
              "      <td>49824</td>\n",
              "      <td>7485</td>\n",
              "      <td>42339</td>\n",
              "      <td>0.150229</td>\n",
              "      <td>0.849771</td>\n",
              "      <td>0.756213</td>\n",
              "      <td>0.303344</td>\n",
              "      <td>0.913455</td>\n",
              "      <td>0.928150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>age</td>\n",
              "      <td>(-0.001, 45.0]</td>\n",
              "      <td>51035</td>\n",
              "      <td>4943</td>\n",
              "      <td>46092</td>\n",
              "      <td>0.096855</td>\n",
              "      <td>0.903145</td>\n",
              "      <td>0.499394</td>\n",
              "      <td>0.330233</td>\n",
              "      <td>0.413595</td>\n",
              "      <td>0.218791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>age</td>\n",
              "      <td>(45.0, 59.0]</td>\n",
              "      <td>50220</td>\n",
              "      <td>3469</td>\n",
              "      <td>46751</td>\n",
              "      <td>0.069076</td>\n",
              "      <td>0.930924</td>\n",
              "      <td>0.350475</td>\n",
              "      <td>0.334955</td>\n",
              "      <td>0.045293</td>\n",
              "      <td>0.218791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>age</td>\n",
              "      <td>(59.0, 109.0]</td>\n",
              "      <td>48217</td>\n",
              "      <td>1486</td>\n",
              "      <td>46731</td>\n",
              "      <td>0.030819</td>\n",
              "      <td>0.969181</td>\n",
              "      <td>0.150131</td>\n",
              "      <td>0.334812</td>\n",
              "      <td>-0.802058</td>\n",
              "      <td>0.218791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>141592</td>\n",
              "      <td>7357</td>\n",
              "      <td>134235</td>\n",
              "      <td>0.051959</td>\n",
              "      <td>0.948041</td>\n",
              "      <td>0.743281</td>\n",
              "      <td>0.961748</td>\n",
              "      <td>-0.257678</td>\n",
              "      <td>0.472206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>7880</td>\n",
              "      <td>2541</td>\n",
              "      <td>5339</td>\n",
              "      <td>0.322462</td>\n",
              "      <td>0.677538</td>\n",
              "      <td>0.256719</td>\n",
              "      <td>0.038252</td>\n",
              "      <td>1.903782</td>\n",
              "      <td>0.472206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>DebtRatio</td>\n",
              "      <td>(-0.001, 0.238]</td>\n",
              "      <td>49824</td>\n",
              "      <td>2977</td>\n",
              "      <td>46847</td>\n",
              "      <td>0.059750</td>\n",
              "      <td>0.940250</td>\n",
              "      <td>0.300768</td>\n",
              "      <td>0.335643</td>\n",
              "      <td>-0.109709</td>\n",
              "      <td>0.012682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>DebtRatio</td>\n",
              "      <td>(0.238, 0.57]</td>\n",
              "      <td>49824</td>\n",
              "      <td>3133</td>\n",
              "      <td>46691</td>\n",
              "      <td>0.062881</td>\n",
              "      <td>0.937119</td>\n",
              "      <td>0.316529</td>\n",
              "      <td>0.334525</td>\n",
              "      <td>-0.055298</td>\n",
              "      <td>0.012682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>DebtRatio</td>\n",
              "      <td>(0.57, 329664.0]</td>\n",
              "      <td>49824</td>\n",
              "      <td>3788</td>\n",
              "      <td>46036</td>\n",
              "      <td>0.076028</td>\n",
              "      <td>0.923972</td>\n",
              "      <td>0.382704</td>\n",
              "      <td>0.329832</td>\n",
              "      <td>0.148677</td>\n",
              "      <td>0.012682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(-0.001, 4700.0]</td>\n",
              "      <td>50101</td>\n",
              "      <td>4364</td>\n",
              "      <td>45737</td>\n",
              "      <td>0.087104</td>\n",
              "      <td>0.912896</td>\n",
              "      <td>0.440897</td>\n",
              "      <td>0.327690</td>\n",
              "      <td>0.296744</td>\n",
              "      <td>0.063931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(4700.0, 6668.976]</td>\n",
              "      <td>55360</td>\n",
              "      <td>3402</td>\n",
              "      <td>51958</td>\n",
              "      <td>0.061452</td>\n",
              "      <td>0.938548</td>\n",
              "      <td>0.343706</td>\n",
              "      <td>0.372261</td>\n",
              "      <td>-0.079810</td>\n",
              "      <td>0.063931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(6668.976, 3008750.0]</td>\n",
              "      <td>44011</td>\n",
              "      <td>2132</td>\n",
              "      <td>41879</td>\n",
              "      <td>0.048442</td>\n",
              "      <td>0.951558</td>\n",
              "      <td>0.215397</td>\n",
              "      <td>0.300049</td>\n",
              "      <td>-0.331462</td>\n",
              "      <td>0.063931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(-0.001, 6.0]</td>\n",
              "      <td>59861</td>\n",
              "      <td>4585</td>\n",
              "      <td>55276</td>\n",
              "      <td>0.076594</td>\n",
              "      <td>0.923406</td>\n",
              "      <td>0.463225</td>\n",
              "      <td>0.396034</td>\n",
              "      <td>0.156713</td>\n",
              "      <td>0.021977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(6.0, 10.0]</td>\n",
              "      <td>46658</td>\n",
              "      <td>2570</td>\n",
              "      <td>44088</td>\n",
              "      <td>0.055082</td>\n",
              "      <td>0.944918</td>\n",
              "      <td>0.259648</td>\n",
              "      <td>0.315875</td>\n",
              "      <td>-0.196020</td>\n",
              "      <td>0.021977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(10.0, 58.0]</td>\n",
              "      <td>42953</td>\n",
              "      <td>2743</td>\n",
              "      <td>40210</td>\n",
              "      <td>0.063860</td>\n",
              "      <td>0.936140</td>\n",
              "      <td>0.277127</td>\n",
              "      <td>0.288091</td>\n",
              "      <td>-0.038801</td>\n",
              "      <td>0.021977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>146457</td>\n",
              "      <td>8244</td>\n",
              "      <td>138213</td>\n",
              "      <td>0.056290</td>\n",
              "      <td>0.943710</td>\n",
              "      <td>0.832896</td>\n",
              "      <td>0.990249</td>\n",
              "      <td>-0.173048</td>\n",
              "      <td>0.474308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>3015</td>\n",
              "      <td>1654</td>\n",
              "      <td>1361</td>\n",
              "      <td>0.548590</td>\n",
              "      <td>0.451410</td>\n",
              "      <td>0.167104</td>\n",
              "      <td>0.009751</td>\n",
              "      <td>2.841239</td>\n",
              "      <td>0.474308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>NumberRealEstateLoansOrLines</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>108124</td>\n",
              "      <td>7314</td>\n",
              "      <td>100810</td>\n",
              "      <td>0.067645</td>\n",
              "      <td>0.932355</td>\n",
              "      <td>0.738937</td>\n",
              "      <td>0.722269</td>\n",
              "      <td>0.022815</td>\n",
              "      <td>0.001412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>NumberRealEstateLoansOrLines</td>\n",
              "      <td>(1.0, 54.0]</td>\n",
              "      <td>41348</td>\n",
              "      <td>2584</td>\n",
              "      <td>38764</td>\n",
              "      <td>0.062494</td>\n",
              "      <td>0.937506</td>\n",
              "      <td>0.261063</td>\n",
              "      <td>0.277731</td>\n",
              "      <td>-0.061891</td>\n",
              "      <td>0.001412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>147639</td>\n",
              "      <td>8929</td>\n",
              "      <td>138710</td>\n",
              "      <td>0.060479</td>\n",
              "      <td>0.939521</td>\n",
              "      <td>0.902101</td>\n",
              "      <td>0.993810</td>\n",
              "      <td>-0.096819</td>\n",
              "      <td>0.262081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>1833</td>\n",
              "      <td>969</td>\n",
              "      <td>864</td>\n",
              "      <td>0.528642</td>\n",
              "      <td>0.471358</td>\n",
              "      <td>0.097899</td>\n",
              "      <td>0.006190</td>\n",
              "      <td>2.760954</td>\n",
              "      <td>0.262081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>116749</td>\n",
              "      <td>7121</td>\n",
              "      <td>109628</td>\n",
              "      <td>0.060994</td>\n",
              "      <td>0.939006</td>\n",
              "      <td>0.719438</td>\n",
              "      <td>0.785447</td>\n",
              "      <td>-0.087782</td>\n",
              "      <td>0.023500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>(1.0, 20.0]</td>\n",
              "      <td>32723</td>\n",
              "      <td>2777</td>\n",
              "      <td>29946</td>\n",
              "      <td>0.084864</td>\n",
              "      <td>0.915136</td>\n",
              "      <td>0.280562</td>\n",
              "      <td>0.214553</td>\n",
              "      <td>0.268238</td>\n",
              "      <td>0.023500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-82a2d70c-d0a1-4333-b111-ce2d3977acd4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-82a2d70c-d0a1-4333-b111-ce2d3977acd4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-82a2d70c-d0a1-4333-b111-ce2d3977acd4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0b7162e5-d53e-43ea-99b0-cceb59cec91f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b7162e5-d53e-43ea-99b0-cceb59cec91f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0b7162e5-d53e-43ea-99b0-cceb59cec91f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"clf\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"Variable_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"NumberOfTime60-89DaysPastDueNotWorse\",\n          \"age\",\n          \"NumberOfOpenCreditLinesAndLoans\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Category\",\n      \"properties\": {\n        \"dtype\": \"interval[float64, right]\",\n        \"num_unique_values\": 19,\n        \"samples\": [\n          \"(-0.001, 0.054]\",\n          \"(59.0, 109.0]\",\n          \"(-0.001, 4700.0]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40603,\n        \"min\": 1833,\n        \"max\": 147639,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          49824,\n          1833,\n          41348\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2413,\n        \"min\": 873,\n        \"max\": 8929,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          2977,\n          2743,\n          873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Non_Event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38578,\n        \"min\": 864,\n        \"max\": 138710,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          46847,\n          40210,\n          48951\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Event_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1401879249805044,\n        \"min\": 0.017521676300578035,\n        \"max\": 0.5485903814262023,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          0.05975032113037893,\n          0.06386049868460876,\n          0.017521676300578035\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Non_Event_Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1401879249805044,\n        \"min\": 0.4514096185737977,\n        \"max\": 0.982478323699422,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          0.9402496788696211,\n          0.9361395013153913,\n          0.982478323699422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Event_Distribution\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24386716844496098,\n        \"min\": 0.08819963629015963,\n        \"max\": 0.9021014346332592,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          0.3007678318852293,\n          0.27712669226106285,\n          0.08819963629015963\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Non_Event_Distribution\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27640340707621025,\n        \"min\": 0.006190264662472953,\n        \"max\": 0.993809735337527,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          0.3356427414848038,\n          0.28809090518291375,\n          0.3507171822832333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WOE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9765162821151362,\n        \"min\": -1.380377310885356,\n        \"max\": 2.8412390829663923,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          -0.10970868041474902,\n          -0.038801298919494874,\n          -1.380377310885356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Information_Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30531219303182205,\n        \"min\": 0.0014118795655926305,\n        \"max\": 0.9281497778942172,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.26208149272764014,\n          0.21879111545855384,\n          0.021976798296292167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 172
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "# Calculating IV\n",
        "\n",
        "from xverse.transformer import WOE\n",
        "clf = WOE()\n",
        "clf.fit(X , Y)\n",
        "clf.woe_df.head(50)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "conservative-rebel",
      "metadata": {
        "id": "conservative-rebel"
      },
      "source": [
        "### Identify features,  target and split it into train and test\n",
        "Presenter- Satgur"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6RE2c8G1Ou--",
      "metadata": {
        "id": "6RE2c8G1Ou--"
      },
      "outputs": [],
      "source": [
        "woe_table = clf.woe_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "FrQNs_ie8klO",
      "metadata": {
        "id": "FrQNs_ie8klO"
      },
      "outputs": [],
      "source": [
        "out_X = clf.transform(X)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "-xlHsYtb86PZ",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "-xlHsYtb86PZ",
        "outputId": "91f40721-3e04-42a4-bc75-2c8882de7fc5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          Variable_Name  Information_Value\n",
              "8  RevolvingUtilizationOfUnsecuredLines           0.928150\n",
              "6               NumberOfTimes90DaysLate           0.474308\n",
              "4  NumberOfTime30-59DaysPastDueNotWorse           0.472206\n",
              "5  NumberOfTime60-89DaysPastDueNotWorse           0.262081\n",
              "9                                   age           0.218791\n",
              "1                         MonthlyIncome           0.063931\n",
              "2                    NumberOfDependents           0.023500\n",
              "3       NumberOfOpenCreditLinesAndLoans           0.021977\n",
              "0                             DebtRatio           0.012682\n",
              "7          NumberRealEstateLoansOrLines           0.001412"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4cf2c1d0-e7f3-4472-9753-f9eb24a0c4d4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Variable_Name</th>\n",
              "      <th>Information_Value</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>0.928150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>0.474308</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>0.472206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>0.262081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>age</td>\n",
              "      <td>0.218791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>0.063931</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>0.023500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>0.021977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>DebtRatio</td>\n",
              "      <td>0.012682</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NumberRealEstateLoansOrLines</td>\n",
              "      <td>0.001412</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cf2c1d0-e7f3-4472-9753-f9eb24a0c4d4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4cf2c1d0-e7f3-4472-9753-f9eb24a0c4d4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4cf2c1d0-e7f3-4472-9753-f9eb24a0c4d4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dba74f44-5799-4902-b921-9bdafedbffe9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dba74f44-5799-4902-b921-9bdafedbffe9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dba74f44-5799-4902-b921-9bdafedbffe9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"clf\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Variable_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"DebtRatio\",\n          \"NumberOfTimes90DaysLate\",\n          \"MonthlyIncome\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Information_Value\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3012357855523733,\n        \"min\": 0.0014118795655926305,\n        \"max\": 0.9281497778942172,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.01268199291639114,\n          0.47430823371355246,\n          0.06393132444905064\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 175
        }
      ],
      "source": [
        "clf.iv_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "jxEL9uEIEgJD",
      "metadata": {
        "id": "jxEL9uEIEgJD"
      },
      "outputs": [],
      "source": [
        "out_X = out_X.drop(['DebtRatio' , 'NumberRealEstateLoansOrLines'] , axis = 1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8TAGX6N_h6pq",
      "metadata": {
        "id": "8TAGX6N_h6pq"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE\n",
        "X_train, X_test, y_train, y_test = train_test_split(out_X, Y, test_size=0.2, shuffle=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "decreased-sucking",
      "metadata": {
        "id": "decreased-sucking"
      },
      "source": [
        "### Logistic Regression from scratch using gradient method (2 points)\n",
        "Presenter- Sree\n",
        "\n",
        "For Linear Regression, we had the hypothesis $yhat = w.X +b$ , whose output range was the set of all Real Numbers.\n",
        "Now, for Logistic Regression our hypothesis is  $yhat = sigmoid(w.X + b)$ , whose output range is between 0 and 1 because by applying a sigmoid function, we always output a number between 0 and 1.\n",
        "\n",
        "$yhat = \\frac{1}{1 +e^{-(w.x+b)}}$\n",
        "\n",
        "Hint: [logistic-regression-with-python](https://cdn.iisc.talentsprint.com/CDS/Assignments/Module2/odsc%20%20Logistic.pdf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a76E_1zOzl-D",
      "metadata": {
        "id": "a76E_1zOzl-D"
      },
      "outputs": [],
      "source": [
        "def sigmoid(x):\n",
        "    return np.maximum(np.minimum(1/(1+np.exp(-x)), 0.9999), 0.0001)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1iKactIqz1-j",
      "metadata": {
        "id": "1iKactIqz1-j"
      },
      "outputs": [],
      "source": [
        "def cost_function(X, y, theta):\n",
        "  t=X.dot(theta)\n",
        "  return -np.sum(y * np.log(sigmoid(t)) + (1-y) * np.log(1 - sigmoid(t))) / X.shape[0]\n",
        "#   # -(np.mean(y*np.log(sigmoid(t)) + (1-y)*np.log(1-sigmoid(t))))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "blELZz-o0A8G",
      "metadata": {
        "id": "blELZz-o0A8G"
      },
      "outputs": [],
      "source": [
        "def gradient_cost_function(X, y, theta):\n",
        "  t=X.dot(theta)\n",
        "  return (X.T.dot(y-sigmoid(t))/X.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "oNQecpbR0mxP",
      "metadata": {
        "id": "oNQecpbR0mxP"
      },
      "outputs": [],
      "source": [
        "def update_theta(X, y, theta,learning_rate):\n",
        "  return theta + learning_rate*gradient_cost_function(X, y, theta)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def predict(X, theta):\n",
        "  return sigmoid(X.dot(theta)>=0.5).astype(int)\n",
        "\n",
        "def get_accuracy(x,y,theta):\n",
        "  y_pred =  predict(x, theta)\n",
        "  return (y_pred==y).sum()/y.shape[0]"
      ],
      "metadata": {
        "id": "V8nlXrdScXQF"
      },
      "id": "V8nlXrdScXQF",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "yWlFN6rO0m0C",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "yWlFN6rO0m0C",
        "outputId": "bce7550a-7a84-457b-b1c8-5a79908e3df6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "start training\n",
            "[Training step #0]-Cost function: 0.6931\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64\n",
            "[Training step #1]-Cost function: 0.6928\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64\n",
            "[Training step #2]-Cost function: 0.6924\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64\n",
            "[Training step #3]-Cost function: 0.6920\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64\n",
            "[Training step #4]-Cost function: 0.6916\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64\n",
            "[Training step #5]-Cost function: 0.6912\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64\n",
            "[Training step #6]-Cost function: 0.6908\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64\n",
            "[Training step #7]-Cost function: 0.6904\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64\n",
            "[Training step #8]-Cost function: 0.6901\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64\n",
            "[Training step #9]-Cost function: 0.6897\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64\n",
            "[Training step #10]-Cost function: 0.6893\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64\n",
            "[Training step #11]-Cost function: 0.6889\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}, {'cost': 0.6889319282586277, 'weights': RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.014291\n",
            "age                                     0.003475\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005457\n",
            "MonthlyIncome                           0.000950\n",
            "NumberOfOpenCreditLinesAndLoans         0.000338\n",
            "NumberOfTimes90DaysLate                 0.004683\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002563\n",
            "NumberOfDependents                      0.000342\n",
            "dtype: float64\n",
            "[Training step #12]-Cost function: 0.6886\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}, {'cost': 0.6889319282586277, 'weights': RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64}, {'cost': 0.6885552233864171, 'weights': RevolvingUtilizationOfUnsecuredLines    0.014291\n",
            "age                                     0.003475\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005457\n",
            "MonthlyIncome                           0.000950\n",
            "NumberOfOpenCreditLinesAndLoans         0.000338\n",
            "NumberOfTimes90DaysLate                 0.004683\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002563\n",
            "NumberOfDependents                      0.000342\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.015469\n",
            "age                                     0.003762\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005909\n",
            "MonthlyIncome                           0.001029\n",
            "NumberOfOpenCreditLinesAndLoans         0.000367\n",
            "NumberOfTimes90DaysLate                 0.005071\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002776\n",
            "NumberOfDependents                      0.000371\n",
            "dtype: float64\n",
            "[Training step #13]-Cost function: 0.6882\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}, {'cost': 0.6889319282586277, 'weights': RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64}, {'cost': 0.6885552233864171, 'weights': RevolvingUtilizationOfUnsecuredLines    0.014291\n",
            "age                                     0.003475\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005457\n",
            "MonthlyIncome                           0.000950\n",
            "NumberOfOpenCreditLinesAndLoans         0.000338\n",
            "NumberOfTimes90DaysLate                 0.004683\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002563\n",
            "NumberOfDependents                      0.000342\n",
            "dtype: float64}, {'cost': 0.688179587868302, 'weights': RevolvingUtilizationOfUnsecuredLines    0.015469\n",
            "age                                     0.003762\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005909\n",
            "MonthlyIncome                           0.001029\n",
            "NumberOfOpenCreditLinesAndLoans         0.000367\n",
            "NumberOfTimes90DaysLate                 0.005071\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002776\n",
            "NumberOfDependents                      0.000371\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.016646\n",
            "age                                     0.004049\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006360\n",
            "MonthlyIncome                           0.001107\n",
            "NumberOfOpenCreditLinesAndLoans         0.000395\n",
            "NumberOfTimes90DaysLate                 0.005459\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002988\n",
            "NumberOfDependents                      0.000399\n",
            "dtype: float64\n",
            "[Training step #14]-Cost function: 0.6878\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}, {'cost': 0.6889319282586277, 'weights': RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64}, {'cost': 0.6885552233864171, 'weights': RevolvingUtilizationOfUnsecuredLines    0.014291\n",
            "age                                     0.003475\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005457\n",
            "MonthlyIncome                           0.000950\n",
            "NumberOfOpenCreditLinesAndLoans         0.000338\n",
            "NumberOfTimes90DaysLate                 0.004683\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002563\n",
            "NumberOfDependents                      0.000342\n",
            "dtype: float64}, {'cost': 0.688179587868302, 'weights': RevolvingUtilizationOfUnsecuredLines    0.015469\n",
            "age                                     0.003762\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005909\n",
            "MonthlyIncome                           0.001029\n",
            "NumberOfOpenCreditLinesAndLoans         0.000367\n",
            "NumberOfTimes90DaysLate                 0.005071\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002776\n",
            "NumberOfDependents                      0.000371\n",
            "dtype: float64}, {'cost': 0.6878050185107545, 'weights': RevolvingUtilizationOfUnsecuredLines    0.016646\n",
            "age                                     0.004049\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006360\n",
            "MonthlyIncome                           0.001107\n",
            "NumberOfOpenCreditLinesAndLoans         0.000395\n",
            "NumberOfTimes90DaysLate                 0.005459\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002988\n",
            "NumberOfDependents                      0.000399\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.017821\n",
            "age                                     0.004335\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006811\n",
            "MonthlyIncome                           0.001186\n",
            "NumberOfOpenCreditLinesAndLoans         0.000422\n",
            "NumberOfTimes90DaysLate                 0.005846\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.003200\n",
            "NumberOfDependents                      0.000427\n",
            "dtype: float64\n",
            "[Training step #15]-Cost function: 0.6874\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}, {'cost': 0.6889319282586277, 'weights': RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64}, {'cost': 0.6885552233864171, 'weights': RevolvingUtilizationOfUnsecuredLines    0.014291\n",
            "age                                     0.003475\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005457\n",
            "MonthlyIncome                           0.000950\n",
            "NumberOfOpenCreditLinesAndLoans         0.000338\n",
            "NumberOfTimes90DaysLate                 0.004683\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002563\n",
            "NumberOfDependents                      0.000342\n",
            "dtype: float64}, {'cost': 0.688179587868302, 'weights': RevolvingUtilizationOfUnsecuredLines    0.015469\n",
            "age                                     0.003762\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005909\n",
            "MonthlyIncome                           0.001029\n",
            "NumberOfOpenCreditLinesAndLoans         0.000367\n",
            "NumberOfTimes90DaysLate                 0.005071\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002776\n",
            "NumberOfDependents                      0.000371\n",
            "dtype: float64}, {'cost': 0.6878050185107545, 'weights': RevolvingUtilizationOfUnsecuredLines    0.016646\n",
            "age                                     0.004049\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006360\n",
            "MonthlyIncome                           0.001107\n",
            "NumberOfOpenCreditLinesAndLoans         0.000395\n",
            "NumberOfTimes90DaysLate                 0.005459\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002988\n",
            "NumberOfDependents                      0.000399\n",
            "dtype: float64}, {'cost': 0.6874315121282195, 'weights': RevolvingUtilizationOfUnsecuredLines    0.017821\n",
            "age                                     0.004335\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006811\n",
            "MonthlyIncome                           0.001186\n",
            "NumberOfOpenCreditLinesAndLoans         0.000422\n",
            "NumberOfTimes90DaysLate                 0.005846\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.003200\n",
            "NumberOfDependents                      0.000427\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.018994\n",
            "age                                     0.004621\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.007262\n",
            "MonthlyIncome                           0.001265\n",
            "NumberOfOpenCreditLinesAndLoans         0.000450\n",
            "NumberOfTimes90DaysLate                 0.006233\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.003412\n",
            "NumberOfDependents                      0.000455\n",
            "dtype: float64\n",
            "[Training step #16]-Cost function: 0.6871\n",
            "[{'cost': 0.6931471805599453, 'weights': array([0., 0., 0., 0., 0., 0., 0., 0.])}, {'cost': 0.6927584997374019, 'weights': RevolvingUtilizationOfUnsecuredLines    0.001201\n",
            "age                                     0.000292\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000457\n",
            "MonthlyIncome                           0.000080\n",
            "NumberOfOpenCreditLinesAndLoans         0.000028\n",
            "NumberOfTimes90DaysLate                 0.000392\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000215\n",
            "NumberOfDependents                      0.000029\n",
            "dtype: float64}, {'cost': 0.6923709239245629, 'weights': RevolvingUtilizationOfUnsecuredLines    0.002401\n",
            "age                                     0.000583\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.000914\n",
            "MonthlyIncome                           0.000159\n",
            "NumberOfOpenCreditLinesAndLoans         0.000057\n",
            "NumberOfTimes90DaysLate                 0.000784\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000429\n",
            "NumberOfDependents                      0.000057\n",
            "dtype: float64}, {'cost': 0.6919844498400753, 'weights': RevolvingUtilizationOfUnsecuredLines    0.003598\n",
            "age                                     0.000874\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001370\n",
            "MonthlyIncome                           0.000238\n",
            "NumberOfOpenCreditLinesAndLoans         0.000085\n",
            "NumberOfTimes90DaysLate                 0.001175\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000643\n",
            "NumberOfDependents                      0.000086\n",
            "dtype: float64}, {'cost': 0.6915990742105745, 'weights': RevolvingUtilizationOfUnsecuredLines    0.004794\n",
            "age                                     0.001164\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.001825\n",
            "MonthlyIncome                           0.000318\n",
            "NumberOfOpenCreditLinesAndLoans         0.000113\n",
            "NumberOfTimes90DaysLate                 0.001566\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.000857\n",
            "NumberOfDependents                      0.000115\n",
            "dtype: float64}, {'cost': 0.6912147937706858, 'weights': RevolvingUtilizationOfUnsecuredLines    0.005988\n",
            "age                                     0.001454\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002281\n",
            "MonthlyIncome                           0.000397\n",
            "NumberOfOpenCreditLinesAndLoans         0.000142\n",
            "NumberOfTimes90DaysLate                 0.001957\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001071\n",
            "NumberOfDependents                      0.000143\n",
            "dtype: float64}, {'cost': 0.6908316052630228, 'weights': RevolvingUtilizationOfUnsecuredLines    0.007180\n",
            "age                                     0.001744\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.002736\n",
            "MonthlyIncome                           0.000476\n",
            "NumberOfOpenCreditLinesAndLoans         0.000170\n",
            "NumberOfTimes90DaysLate                 0.002347\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001285\n",
            "NumberOfDependents                      0.000172\n",
            "dtype: float64}, {'cost': 0.6904495054381865, 'weights': RevolvingUtilizationOfUnsecuredLines    0.008369\n",
            "age                                     0.002034\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003190\n",
            "MonthlyIncome                           0.000555\n",
            "NumberOfOpenCreditLinesAndLoans         0.000198\n",
            "NumberOfTimes90DaysLate                 0.002737\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001498\n",
            "NumberOfDependents                      0.000200\n",
            "dtype: float64}, {'cost': 0.6900684910547643, 'weights': RevolvingUtilizationOfUnsecuredLines    0.009557\n",
            "age                                     0.002323\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.003644\n",
            "MonthlyIncome                           0.000634\n",
            "NumberOfOpenCreditLinesAndLoans         0.000226\n",
            "NumberOfTimes90DaysLate                 0.003127\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001712\n",
            "NumberOfDependents                      0.000229\n",
            "dtype: float64}, {'cost': 0.6896885588793297, 'weights': RevolvingUtilizationOfUnsecuredLines    0.010744\n",
            "age                                     0.002611\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004098\n",
            "MonthlyIncome                           0.000713\n",
            "NumberOfOpenCreditLinesAndLoans         0.000254\n",
            "NumberOfTimes90DaysLate                 0.003516\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.001925\n",
            "NumberOfDependents                      0.000257\n",
            "dtype: float64}, {'cost': 0.689309705686438, 'weights': RevolvingUtilizationOfUnsecuredLines    0.011928\n",
            "age                                     0.002899\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.004551\n",
            "MonthlyIncome                           0.000792\n",
            "NumberOfOpenCreditLinesAndLoans         0.000282\n",
            "NumberOfTimes90DaysLate                 0.003905\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002138\n",
            "NumberOfDependents                      0.000286\n",
            "dtype: float64}, {'cost': 0.6889319282586277, 'weights': RevolvingUtilizationOfUnsecuredLines    0.013110\n",
            "age                                     0.003187\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005004\n",
            "MonthlyIncome                           0.000871\n",
            "NumberOfOpenCreditLinesAndLoans         0.000310\n",
            "NumberOfTimes90DaysLate                 0.004294\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002351\n",
            "NumberOfDependents                      0.000314\n",
            "dtype: float64}, {'cost': 0.6885552233864171, 'weights': RevolvingUtilizationOfUnsecuredLines    0.014291\n",
            "age                                     0.003475\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005457\n",
            "MonthlyIncome                           0.000950\n",
            "NumberOfOpenCreditLinesAndLoans         0.000338\n",
            "NumberOfTimes90DaysLate                 0.004683\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002563\n",
            "NumberOfDependents                      0.000342\n",
            "dtype: float64}, {'cost': 0.688179587868302, 'weights': RevolvingUtilizationOfUnsecuredLines    0.015469\n",
            "age                                     0.003762\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.005909\n",
            "MonthlyIncome                           0.001029\n",
            "NumberOfOpenCreditLinesAndLoans         0.000367\n",
            "NumberOfTimes90DaysLate                 0.005071\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002776\n",
            "NumberOfDependents                      0.000371\n",
            "dtype: float64}, {'cost': 0.6878050185107545, 'weights': RevolvingUtilizationOfUnsecuredLines    0.016646\n",
            "age                                     0.004049\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006360\n",
            "MonthlyIncome                           0.001107\n",
            "NumberOfOpenCreditLinesAndLoans         0.000395\n",
            "NumberOfTimes90DaysLate                 0.005459\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.002988\n",
            "NumberOfDependents                      0.000399\n",
            "dtype: float64}, {'cost': 0.6874315121282195, 'weights': RevolvingUtilizationOfUnsecuredLines    0.017821\n",
            "age                                     0.004335\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.006811\n",
            "MonthlyIncome                           0.001186\n",
            "NumberOfOpenCreditLinesAndLoans         0.000422\n",
            "NumberOfTimes90DaysLate                 0.005846\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.003200\n",
            "NumberOfDependents                      0.000427\n",
            "dtype: float64}, {'cost': 0.6870590655431134, 'weights': RevolvingUtilizationOfUnsecuredLines    0.018994\n",
            "age                                     0.004621\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.007262\n",
            "MonthlyIncome                           0.001265\n",
            "NumberOfOpenCreditLinesAndLoans         0.000450\n",
            "NumberOfTimes90DaysLate                 0.006233\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.003412\n",
            "NumberOfDependents                      0.000455\n",
            "dtype: float64}]\n",
            "Accuracy : 0.9324970730891453\n",
            "RevolvingUtilizationOfUnsecuredLines    0.020165\n",
            "age                                     0.004907\n",
            "NumberOfTime30-59DaysPastDueNotWorse    0.007713\n",
            "MonthlyIncome                           0.001343\n",
            "NumberOfOpenCreditLinesAndLoans         0.000478\n",
            "NumberOfTimes90DaysLate                 0.006620\n",
            "NumberOfTime60-89DaysPastDueNotWorse    0.003624\n",
            "NumberOfDependents                      0.000483\n",
            "dtype: float64\n"
          ]
        }
      ],
      "source": [
        "def train(X, y, learning_rate, iterations=500,threshold=0.002):\n",
        "  theta = np.zeros(X.shape[1])\n",
        "  costs = []\n",
        "  print(\"start training\")\n",
        "  for i in range(iterations):\n",
        "    cost = cost_function(X, y, theta)\n",
        "    print(f'[Training step #{i}]-Cost function: {cost :.4f}')\n",
        "    costs.append({'cost':cost,'weights':theta})\n",
        "    print(costs)\n",
        "    print(\"Accuracy :\", get_accuracy(X_test,y_test,theta))\n",
        "    theta = update_theta(X, y, theta,learning_rate)\n",
        "    print(theta)\n",
        "    if i>15 and abs(costs[-2]['cost']-costs[-1]['cost'])<threshold:\n",
        "      break\n",
        "\n",
        "  return theta, costs\n",
        "\n",
        "theta,costs = train(X_train, y_train,learning_rate=0.005)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "QK8Qdl660m2p",
      "metadata": {
        "id": "QK8Qdl660m2p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "50d33fa7-76ab-46fb-a2b9-61d7f2eeb0c8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy : 0.9324970730891453\n"
          ]
        }
      ],
      "source": [
        "\n",
        "\n",
        "accuracy = get_accuracy(X_test,y_test,theta)\n",
        "print('Accuracy :', accuracy)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ec2yb7T50m4Y",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 872
        },
        "id": "ec2yb7T50m4Y",
        "outputId": "ed798204-6bb5-4351-b083-301136e0f23f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(15,10))\n",
        "plt.title(\"Model Accuracy\")\n",
        "plt.plot(np.arange(0,len(costs)),\n",
        "[get_accuracy(X_train,y_train,c['weights']) for c in costs],\n",
        "alpha=0.7,\n",
        "label = 'train',\n",
        "color='r')\n",
        "plt.plot(np.arange(0,len(costs)),\n",
        "[get_accuracy(X_test,y_test,c['weights']) for c in costs],\n",
        "alpha=0.7,\n",
        "label = 'test',\n",
        "color='b')\n",
        "\n",
        "plt.xlabel(\"Iterations\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.legend(loc='best')\n",
        "plt.xticks(np.arange(0,len(costs)+1,40))\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "MIa-Y1X_q6VC",
      "metadata": {
        "id": "MIa-Y1X_q6VC"
      },
      "source": [
        "### Implement the Logistic regression using sklearn (2 points)\n",
        "\n",
        "As there is imbalance in the class distribution, add weightage to the Logistic regression.\n",
        "\n",
        "* Find the accuracy with class weightage in Logistic regression\n",
        "* Find the accuracy without class weightage in Logistic regression\n",
        "\n",
        "Hint: [LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "reliable-black",
      "metadata": {
        "id": "reliable-black"
      },
      "source": [
        "### Implement the Logistic regression using sklearn (2 points)\n",
        "Presenter- Pankaj\n",
        "\n",
        "As there is imbalance in the class distribution, add weightage to the Logistic regression.\n",
        "\n",
        "* Find the accuracy with class weightage in Logistic regression\n",
        "* Find the accuracy without class weightage in Logistic regression\n",
        "\n",
        "Hint: [LogisticRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "OtJ4cZagFn2t",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OtJ4cZagFn2t",
        "outputId": "6e17f3d7-bfaf-41de-ad77-02014accc4aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class Weights: {0: 0.06, 1: 0.933}, F1 Score: 0.28\n",
            "Class Weights: {0: 1, 1: 5}, F1 Score: 0.38\n",
            "Class Weights: {0: 1, 1: 10}, F1 Score: 0.30\n",
            "Class Weights: {0: 1, 1: 15}, F1 Score: 0.28\n",
            "Class Weights: {0: 1, 1: 20}, F1 Score: 0.26\n",
            "Class Weights: {0: 1, 1: 25}, F1 Score: 0.26\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix, precision_score, recall_score, f1_score, accuracy_score\n",
        "\n",
        "class_weights_list = [\n",
        "    {0: 0.06, 1: 0.933},\n",
        "    {0: 1, 1: 5},\n",
        "    {0: 1, 1: 10},\n",
        "    {0: 1, 1: 15},\n",
        "    {0: 1, 1: 20},\n",
        "    {0: 1, 1: 25},\n",
        "]\n",
        "\n",
        "for weights in class_weights_list:\n",
        "    lr = LogisticRegression(class_weight=weights, max_iter=10000)\n",
        "    lr.fit(X_train, y_train)\n",
        "    y_pred = lr.predict(X_test)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    print(f'Class Weights: {weights}, F1 Score: {f1:.2f}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "z8GhQvTayiq5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z8GhQvTayiq5",
        "outputId": "10fe9115-ccf6-42b5-e976-7f2f57d4601f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with class weightage: 0.9237330657300552\n",
            "F1 SCORE with class weightage: 0.37942297223734345\n"
          ]
        }
      ],
      "source": [
        "# Train logistic regression with class weightage\n",
        "\n",
        "class_weights = {0: 1, 1: 5}\n",
        "lr_with_weight = LogisticRegression(class_weight=class_weights, random_state=42, max_iter=10000)\n",
        "lr_with_weight.fit(X_train, y_train)\n",
        "\n",
        "# Predict and evaluate\n",
        "y_pred_with_weight = lr_with_weight.predict(X_test)\n",
        "accuracy_with_weight = accuracy_score(y_test, y_pred_with_weight)\n",
        "f1 = f1_score(y_test, y_pred_with_weight)\n",
        "print(\"Accuracy with class weightage:\", accuracy_with_weight)\n",
        "print(\"F1 SCORE with class weightage:\", f1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "similar-flower",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "similar-flower",
        "outputId": "5f9655db-88ab-4de6-812f-750946b836c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with out class weightage: 0.9350058538217093\n",
            "F1 SCORE with out class weightage: 0.1825830879259571\n"
          ]
        }
      ],
      "source": [
        "# Without weightage\n",
        "# YOUR CODE HERE\n",
        "# Train logistic regression without class weightage\n",
        "\n",
        "lr_no_weight = LogisticRegression(random_state=42)\n",
        "lr_no_weight.fit(X_train, y_train)\n",
        "\n",
        "# Predict and evaluate\n",
        "y_pred_no_weight = lr_no_weight.predict(X_test)\n",
        "accuracy_no_weight = accuracy_score(y_test, y_pred_no_weight)\n",
        "f1 = f1_score(y_test, y_pred_no_weight)\n",
        "print(\"Accuracy with out class weightage:\", accuracy_no_weight)\n",
        "print(\"F1 SCORE with out class weightage:\", f1)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "signal-error",
      "metadata": {
        "id": "signal-error"
      },
      "source": [
        "### Credit scoring (1 point)\n",
        "Presenter- Harshal\n",
        "\n",
        "\n",
        "\n",
        "When scaling the model into a scorecard, we will need both the Logistic Regression coefficients from model fitting as well as the transformed WoE values. We will also need to convert the score from the model from the log-odds unit to a points system.\n",
        "For each independent variable Xi, its corresponding score is:\n",
        "\n",
        "$Score = \\sum_{i=1}^{n} (-(β_i × WoE_i + \\frac{α}{n}) × Factor + \\frac{Offset}{n})$\n",
        "\n",
        "Where:\n",
        "\n",
        "βi — logistic regression coefficient for the variable Xi\n",
        "\n",
        "α — logistic regression intercept\n",
        "\n",
        "WoE — Weight of Evidence value for variable Xi\n",
        "\n",
        "n — number of independent variable Xi in the model\n",
        "\n",
        "Factor, Offset — known as scaling parameter\n",
        "\n",
        "  - Factor = pdo / ln(2); pdo is points to double the odds\n",
        "  - Offset = Round_of_Score - {Factor * ln(Odds)}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "worst-spare",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "worst-spare",
        "outputId": "ae1744fa-a2aa-4b28-bb94-145b0a0a5e00"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(28.85390081777927, 487.1228762045055)"
            ]
          },
          "metadata": {},
          "execution_count": 188
        }
      ],
      "source": [
        "# Scaling factors\n",
        "factor = 20/np.log(2)\n",
        "offset = 600 - ( factor * np.log(50))\n",
        "factor, offset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "E_gcAwTvKBli",
      "metadata": {
        "id": "E_gcAwTvKBli"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE\n",
        "# No weight\n",
        "cols = X_train.columns.to_list()\n",
        "coef_lr = lr_no_weight.coef_\n",
        "intercept_lr = lr_no_weight.intercept_\n",
        "n_lr=len(coef_lr[0])\n",
        "woe_table\n",
        "woe_dict = woe_table[woe_table['Variable_Name'].isin(out_X.columns)].set_index(['Variable_Name','Category'])['WOE'].to_dict()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "uWQLKyEjOjZz",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "uWQLKyEjOjZz",
        "outputId": "b105812b-137e-480a-980a-8771db553dfe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     col                    bin  score\n",
              "0   RevolvingUtilizationOfUnsecuredLines        (-0.001, 0.054]  100.0\n",
              "1   RevolvingUtilizationOfUnsecuredLines         (0.054, 0.376]   87.0\n",
              "2   RevolvingUtilizationOfUnsecuredLines         (0.376, 1.614]   50.0\n",
              "3                                    age         (-0.001, 45.0]   64.0\n",
              "4                                    age           (45.0, 59.0]   69.0\n",
              "5                                    age          (59.0, 109.0]   81.0\n",
              "6   NumberOfTime30-59DaysPastDueNotWorse          (-0.001, 1.0]   75.0\n",
              "7   NumberOfTime30-59DaysPastDueNotWorse            (1.0, 98.0]   35.0\n",
              "8                          MonthlyIncome       (-0.001, 4700.0]   65.0\n",
              "9                          MonthlyIncome     (4700.0, 6668.976]   71.0\n",
              "10                         MonthlyIncome  (6668.976, 3008750.0]   75.0\n",
              "11       NumberOfOpenCreditLinesAndLoans          (-0.001, 6.0]   69.0\n",
              "12       NumberOfOpenCreditLinesAndLoans            (6.0, 10.0]   71.0\n",
              "13       NumberOfOpenCreditLinesAndLoans           (10.0, 58.0]   70.0\n",
              "14               NumberOfTimes90DaysLate          (-0.001, 1.0]   73.0\n",
              "15               NumberOfTimes90DaysLate            (1.0, 98.0]   20.0\n",
              "16  NumberOfTime60-89DaysPastDueNotWorse          (-0.001, 1.0]   71.0\n",
              "17  NumberOfTime60-89DaysPastDueNotWorse            (1.0, 98.0]   40.0\n",
              "18                    NumberOfDependents          (-0.001, 1.0]   71.0\n",
              "19                    NumberOfDependents            (1.0, 20.0]   67.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3289fa23-fcc2-4751-a99d-40f577c177d1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col</th>\n",
              "      <th>bin</th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(-0.001, 0.054]</td>\n",
              "      <td>100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(0.054, 0.376]</td>\n",
              "      <td>87.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(0.376, 1.614]</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>age</td>\n",
              "      <td>(-0.001, 45.0]</td>\n",
              "      <td>64.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>age</td>\n",
              "      <td>(45.0, 59.0]</td>\n",
              "      <td>69.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>age</td>\n",
              "      <td>(59.0, 109.0]</td>\n",
              "      <td>81.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>75.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>35.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(-0.001, 4700.0]</td>\n",
              "      <td>65.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(4700.0, 6668.976]</td>\n",
              "      <td>71.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(6668.976, 3008750.0]</td>\n",
              "      <td>75.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(-0.001, 6.0]</td>\n",
              "      <td>69.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(6.0, 10.0]</td>\n",
              "      <td>71.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(10.0, 58.0]</td>\n",
              "      <td>70.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>73.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>20.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>71.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>40.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>71.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>(1.0, 20.0]</td>\n",
              "      <td>67.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3289fa23-fcc2-4751-a99d-40f577c177d1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3289fa23-fcc2-4751-a99d-40f577c177d1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3289fa23-fcc2-4751-a99d-40f577c177d1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d598f7d3-18d0-4695-bd6a-59309e50be62\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d598f7d3-18d0-4695-bd6a-59309e50be62')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d598f7d3-18d0-4695-bd6a-59309e50be62 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9b0b433f-a8e3-47b9-a46c-2cd59b85b431\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('score_df_no_weight')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9b0b433f-a8e3-47b9-a46c-2cd59b85b431 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('score_df_no_weight');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "score_df_no_weight",
              "summary": "{\n  \"name\": \"score_df_no_weight\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"col\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"age\",\n          \"NumberOfTimes90DaysLate\",\n          \"RevolvingUtilizationOfUnsecuredLines\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bin\",\n      \"properties\": {\n        \"dtype\": \"interval[float64, right]\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"(4700.0, 6668.976]\",\n          \"(-0.001, 6.0]\",\n          \"(-0.001, 0.054]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.036804478329127,\n        \"min\": 20.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          71.0,\n          73.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 191
        }
      ],
      "source": [
        "d = {\"col\":[],\"bin\":[],'score':[]}\n",
        "score_df_no_weight = pd.DataFrame(d)\n",
        "for col,beta in zip(cols,coef_lr[0]):\n",
        "  for bin,woe in woe_dict.items():\n",
        "    if col in bin:\n",
        "      score = int(-(beta * woe + (intercept_lr/n_lr)) * factor + (offset/n_lr))\n",
        "      score_df_no_weight=score_df_no_weight.append({\"col\":bin[0],'bin':bin[1],'score':score},ignore_index=True)\n",
        "score_df_no_weight"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "V5nz_z-GP6cn",
      "metadata": {
        "id": "V5nz_z-GP6cn"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE\n",
        "# Weighted\n",
        "cols = X_train.columns.to_list()\n",
        "coef_lr = lr_with_weight.coef_\n",
        "intercept_lr = lr_with_weight.intercept_\n",
        "n_lr=len(coef_lr[0])\n",
        "woe_table\n",
        "woe_dict = woe_table[woe_table['Variable_Name'].isin(out_X.columns)].set_index(['Variable_Name','Category'])['WOE'].to_dict()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Iaz2W6ILQCvU",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "id": "Iaz2W6ILQCvU",
        "outputId": "6089b9d7-3c25-45f3-faf9-74d1ba69d267"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                     col                    bin  score\n",
              "0   RevolvingUtilizationOfUnsecuredLines        (-0.001, 0.054]   95.0\n",
              "1   RevolvingUtilizationOfUnsecuredLines         (0.054, 0.376]   82.0\n",
              "2   RevolvingUtilizationOfUnsecuredLines         (0.376, 1.614]   44.0\n",
              "3                                    age         (-0.001, 45.0]   58.0\n",
              "4                                    age           (45.0, 59.0]   63.0\n",
              "5                                    age          (59.0, 109.0]   76.0\n",
              "6   NumberOfTime30-59DaysPastDueNotWorse          (-0.001, 1.0]   69.0\n",
              "7   NumberOfTime30-59DaysPastDueNotWorse            (1.0, 98.0]   26.0\n",
              "8                          MonthlyIncome       (-0.001, 4700.0]   59.0\n",
              "9                          MonthlyIncome     (4700.0, 6668.976]   65.0\n",
              "10                         MonthlyIncome  (6668.976, 3008750.0]   70.0\n",
              "11       NumberOfOpenCreditLinesAndLoans          (-0.001, 6.0]   64.0\n",
              "12       NumberOfOpenCreditLinesAndLoans            (6.0, 10.0]   65.0\n",
              "13       NumberOfOpenCreditLinesAndLoans           (10.0, 58.0]   64.0\n",
              "14               NumberOfTimes90DaysLate          (-0.001, 1.0]   67.0\n",
              "15               NumberOfTimes90DaysLate            (1.0, 98.0]    9.0\n",
              "16  NumberOfTime60-89DaysPastDueNotWorse          (-0.001, 1.0]   65.0\n",
              "17  NumberOfTime60-89DaysPastDueNotWorse            (1.0, 98.0]   25.0\n",
              "18                    NumberOfDependents          (-0.001, 1.0]   65.0\n",
              "19                    NumberOfDependents            (1.0, 20.0]   62.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64492bff-289f-43a4-a703-baa3a9d1710a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>col</th>\n",
              "      <th>bin</th>\n",
              "      <th>score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(-0.001, 0.054]</td>\n",
              "      <td>95.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(0.054, 0.376]</td>\n",
              "      <td>82.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>RevolvingUtilizationOfUnsecuredLines</td>\n",
              "      <td>(0.376, 1.614]</td>\n",
              "      <td>44.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>age</td>\n",
              "      <td>(-0.001, 45.0]</td>\n",
              "      <td>58.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>age</td>\n",
              "      <td>(45.0, 59.0]</td>\n",
              "      <td>63.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>age</td>\n",
              "      <td>(59.0, 109.0]</td>\n",
              "      <td>76.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>69.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NumberOfTime30-59DaysPastDueNotWorse</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>26.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(-0.001, 4700.0]</td>\n",
              "      <td>59.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(4700.0, 6668.976]</td>\n",
              "      <td>65.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>MonthlyIncome</td>\n",
              "      <td>(6668.976, 3008750.0]</td>\n",
              "      <td>70.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(-0.001, 6.0]</td>\n",
              "      <td>64.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(6.0, 10.0]</td>\n",
              "      <td>65.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>NumberOfOpenCreditLinesAndLoans</td>\n",
              "      <td>(10.0, 58.0]</td>\n",
              "      <td>64.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>67.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>NumberOfTimes90DaysLate</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>65.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>NumberOfTime60-89DaysPastDueNotWorse</td>\n",
              "      <td>(1.0, 98.0]</td>\n",
              "      <td>25.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>(-0.001, 1.0]</td>\n",
              "      <td>65.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>NumberOfDependents</td>\n",
              "      <td>(1.0, 20.0]</td>\n",
              "      <td>62.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64492bff-289f-43a4-a703-baa3a9d1710a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-64492bff-289f-43a4-a703-baa3a9d1710a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-64492bff-289f-43a4-a703-baa3a9d1710a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c51b65e-3c1c-4a85-8f94-c85169fb054c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c51b65e-3c1c-4a85-8f94-c85169fb054c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c51b65e-3c1c-4a85-8f94-c85169fb054c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_cfb9ad76-1e67-46d8-b2cb-e73cd639f023\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('score_df_weight')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_cfb9ad76-1e67-46d8-b2cb-e73cd639f023 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('score_df_weight');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "score_df_weight",
              "summary": "{\n  \"name\": \"score_df_weight\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"col\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"age\",\n          \"NumberOfTimes90DaysLate\",\n          \"RevolvingUtilizationOfUnsecuredLines\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bin\",\n      \"properties\": {\n        \"dtype\": \"interval[float64, right]\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"(4700.0, 6668.976]\",\n          \"(-0.001, 6.0]\",\n          \"(-0.001, 0.054]\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.97439149985485,\n        \"min\": 9.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          95.0,\n          82.0,\n          76.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 193
        }
      ],
      "source": [
        "d = {\"col\":[],\"bin\":[],'score':[]}\n",
        "score_df_weight = pd.DataFrame(d)\n",
        "for col,beta in zip(cols,coef_lr[0]):\n",
        "  for bin,woe in woe_dict.items():\n",
        "    if col in bin:\n",
        "      score = int(-(beta * woe + (intercept_lr/n_lr)) * factor + (offset/n_lr))\n",
        "      score_df_weight=score_df_weight.append({\"col\":bin[0],'bin':bin[1],'score':score},ignore_index=True)\n",
        "score_df_weight"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "intelligent-internship",
      "metadata": {
        "id": "intelligent-internship"
      },
      "source": [
        "### Performance Metrics (1 point)\n",
        "Presenter- Anusha"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "innocent-hygiene",
      "metadata": {
        "id": "innocent-hygiene"
      },
      "source": [
        "#### Precision"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "qJd3IJ3tRW-J",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qJd3IJ3tRW-J",
        "outputId": "b5dab1dc-cd80-469a-8164-b74755e149db"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Non weighted precision: 0.6\n"
          ]
        }
      ],
      "source": [
        "# Non weighted\n",
        "prec = 0\n",
        "for i,r in zip(y_pred_no_weight,np.array(y_test)):\n",
        "  if i==r:\n",
        "    prec+=i\n",
        "print('Non weighted precision:',round(prec/(y_pred_no_weight).sum(),2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ss5JoyOLROIX",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ss5JoyOLROIX",
        "outputId": "45d490b2-292c-4457-d5e9-92a7a2d60f62"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Weighted precision: 0.42\n"
          ]
        }
      ],
      "source": [
        "# Weighted\n",
        "prec = 0\n",
        "for i,r in zip(y_pred_with_weight,np.array(y_test)):\n",
        "  if i==r:\n",
        "    prec+=i\n",
        "print('Weighted precision:',round(prec/(y_pred_with_weight).sum(),2))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "_rV23qsPRW-K",
      "metadata": {
        "id": "_rV23qsPRW-K"
      },
      "source": [
        "#### Recall"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "UkSxFItIRW-K",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UkSxFItIRW-K",
        "outputId": "f702be79-320a-480a-f509-ed8539ab38fb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Non weighted recall: 0.11\n"
          ]
        }
      ],
      "source": [
        "# Non weighted\n",
        "recall = 0\n",
        "for i,r in zip(y_pred_no_weight,np.array(y_test)):\n",
        "  if i==r:\n",
        "    recall+=i\n",
        "print('Non weighted recall:',round(recall/(y_test).sum(),2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "TlQw3Hj4SJ0E",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TlQw3Hj4SJ0E",
        "outputId": "e0069d39-a54b-4942-d79c-aedb30e01ea4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Weighted recall: 0.35\n"
          ]
        }
      ],
      "source": [
        "# Weighted\n",
        "recall = 0\n",
        "for i,r in zip(y_pred_with_weight,np.array(y_test)):\n",
        "  if i==r:\n",
        "    recall+=i\n",
        "print('Weighted recall:',round(recall/(y_test).sum(),2))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "wired-amendment",
      "metadata": {
        "id": "wired-amendment"
      },
      "source": [
        "#### Classification Report"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "impossible-machinery",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "impossible-machinery",
        "outputId": "0682d4be-08d3-47d0-d266-d82996b7a6e7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Weighted\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "    Defaulter       0.95      0.97      0.96     27877\n",
            "Non Defaulter       0.42      0.35      0.38      2018\n",
            "\n",
            "     accuracy                           0.92     29895\n",
            "    macro avg       0.69      0.66      0.67     29895\n",
            " weighted avg       0.92      0.92      0.92     29895\n",
            "\n",
            "\n",
            "Non Weighted\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "    Defaulter       0.94      0.99      0.97     27877\n",
            "Non Defaulter       0.60      0.11      0.18      2018\n",
            "\n",
            "     accuracy                           0.94     29895\n",
            "    macro avg       0.77      0.55      0.57     29895\n",
            " weighted avg       0.92      0.94      0.91     29895\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "from sklearn.metrics import classification_report\n",
        "target_names = ['Defaulter', 'Non Defaulter']\n",
        "print('Weighted')\n",
        "print(classification_report(y_test, y_pred_with_weight, target_names=target_names))\n",
        "\n",
        "print('\\nNon Weighted')\n",
        "print(classification_report(y_test, y_pred_no_weight, target_names=target_names))"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dense-feelings",
      "metadata": {
        "id": "dense-feelings"
      },
      "source": [
        "#### Confusion matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "jFE0VgS3SXLh",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "jFE0VgS3SXLh",
        "outputId": "bcd0212f-1871-4294-c87f-bc4a5535cec6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Weighted matrix\n",
        "matrix=confusion_matrix(y_test, y_pred_with_weight)\n",
        "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = matrix, display_labels = [0, 1])\n",
        "\n",
        "cm_display.plot()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7X2SNbpdSpWC",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "7X2SNbpdSpWC",
        "outputId": "c8fd93d5-44ce-4cd3-d8ab-0482a2bb8a5f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Weighted matrix\n",
        "matrix=confusion_matrix(y_test, y_pred_no_weight)\n",
        "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = matrix, display_labels = [0, 1])\n",
        "\n",
        "cm_display.plot()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "n8oKfqQSAwxg",
      "metadata": {
        "id": "n8oKfqQSAwxg"
      },
      "source": [
        "**Aditi Ravishankar**"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "RR-ivkGyqJXs",
      "metadata": {
        "id": "RR-ivkGyqJXs"
      },
      "source": [
        "### Report Analysis\n",
        "\n",
        "* Comment on the performance of the model with weightage and without weightage\n",
        "* Have you tried implementing Logistic regression with normal features instead of WOE ?\n",
        "  - Compare the classification report for both implementations"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "gys1VDAXmwst",
      "metadata": {
        "id": "gys1VDAXmwst"
      },
      "source": [
        "**Implementation of Logistic regression with normal features instead of WOE**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "U8ufiWtOnEhO",
      "metadata": {
        "id": "U8ufiWtOnEhO"
      },
      "source": [
        "Without Weightage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "B0kndXT3m1yZ",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B0kndXT3m1yZ",
        "outputId": "dde830ef-0ccb-4b48-942c-92f502f87059"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with normal features 0.9342364943970564\n"
          ]
        }
      ],
      "source": [
        "df_normal = df.copy()\n",
        "X_normal = df_normal.drop('SeriousDlqin2yrs',  axis = 1)\n",
        "y_normal = df_normal['SeriousDlqin2yrs']\n",
        "\n",
        "# Split data into training and test sets\n",
        "X_normal_train, X_normal_test, y_normal_train, y_normal_test = train_test_split(X_normal, y_normal, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize logistic regression model (Without Weightage)\n",
        "lr_norm_no_weight = LogisticRegression(max_iter=10000)\n",
        "\n",
        "# Fit the model\n",
        "lr_norm_no_weight.fit(X_normal_train, y_normal_train)\n",
        "\n",
        "# Predict on the test set\n",
        "y_pred_normal_no_weight = lr_norm_no_weight.predict(X_normal_test)\n",
        "\n",
        "accuracy_normal_features = accuracy_score(y_normal_test, y_pred_normal_no_weight)\n",
        "print(\"Accuracy with normal features\", accuracy_normal_features)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "OffDYEE1nH8W",
      "metadata": {
        "id": "OffDYEE1nH8W"
      },
      "source": [
        "With Weightage"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fr5vGZPEnHgY",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fr5vGZPEnHgY",
        "outputId": "246e87ee-ca61-4573-e884-c0ae48f0b79b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class Weights: {0: 0.06, 1: 0.933}, F1 Score: 0.28\n",
            "Class Weights: {0: 1, 1: 5}, F1 Score: 0.32\n",
            "Class Weights: {0: 1, 1: 10}, F1 Score: 0.31\n",
            "Class Weights: {0: 1, 1: 15}, F1 Score: 0.28\n",
            "Class Weights: {0: 1, 1: 20}, F1 Score: 0.26\n",
            "Class Weights: {0: 1, 1: 25}, F1 Score: 0.24\n"
          ]
        }
      ],
      "source": [
        "class_weights_list = [\n",
        "    {0: 0.06, 1: 0.933},\n",
        "    {0: 1, 1: 5},\n",
        "    {0: 1, 1: 10},\n",
        "    {0: 1, 1: 15},\n",
        "    {0: 1, 1: 20},\n",
        "    {0: 1, 1: 25},\n",
        "]\n",
        "\n",
        "for weights in class_weights_list:\n",
        "    lr = LogisticRegression(class_weight=weights, max_iter=10000)\n",
        "    lr.fit(X_normal_train, y_normal_train)\n",
        "    y_pred = lr.predict(X_normal_test)\n",
        "    f1 = f1_score(y_normal_test, y_pred)\n",
        "    print(f'Class Weights: {weights}, F1 Score: {f1:.2f}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "O0WdGdU0m4zU",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O0WdGdU0m4zU",
        "outputId": "e36a92ec-2826-4234-8f32-72333ea8c475"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with class weightage: 0.8830573674527513\n"
          ]
        }
      ],
      "source": [
        "# Train logistic regression with class weightage\n",
        "best_weights = {0: 1, 1: 5}\n",
        "lr_norm_with_weight = LogisticRegression(class_weight=best_weights, random_state=42, max_iter=10000)\n",
        "lr_norm_with_weight.fit(X_normal_train, y_normal_train)\n",
        "\n",
        "# Predict and evaluate\n",
        "y_pred_normal_with_weight = lr_norm_with_weight.predict(X_normal_test)\n",
        "accuracy_with_weight = accuracy_score(y_normal_test, y_pred_normal_with_weight)\n",
        "print(\"Accuracy with class weightage:\", accuracy_with_weight)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2dTDTbb_sY9C",
      "metadata": {
        "id": "2dTDTbb_sY9C"
      },
      "source": [
        "### **REPORT**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "-bImqG7RnkKl",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "collapsed": true,
        "id": "-bImqG7RnkKl",
        "outputId": "54a3db03-0798-4369-f594-51facb3b64b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1mCLASS DISTRIBUTION\u001b[0m\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1mCOMPARISON OF CLASSIFICATION REPORTS\u001b[0m\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x700 with 8 Axes>"
            ],
            "image/png": "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zoSNxsbGTyx/fLh2ZWJjYzFs2DCkpaXh66+/RkxMDDZt2oQBAwY8dd9EREREz4KxERGpCyfCJiKt16tXL5SVleH+/fvShIwPubu7Qy6Xo6ioCC1btlR62dnZAQAMDAwAAOXl5TXet6enJ7KysnDr1q0q67i4uGDKlCn49ttvMXDgQKxfv77G+yEiIiKqLsZGRKQuTBoRkdbT19dHbm4ucnJyoK+vr1RmamqK999/H1OmTEFycjIKCwtx/PhxrFixAsnJyQAABwcHyGQy7Nq1C9evX5e+gauOoUOHwsbGBoGBgcjIyMC5c+ewfft2ZGZm4t69ewgPD0d6ejouXryIjIwMHD16FG5ubrV6/ERERESPY2xEROrCpBERvRDMzMxgZmZWadncuXMRHR2N+Ph4uLm5oVevXkhLS4OjoyMAwNbWFnFxcZgxYwasra2l4dzVYWBggG+//RZNmjRBnz594OHhgYULF0JfXx/6+vq4efMmRo4cCRcXFwwZMgS9e/dGXFxcrRwzERERUVUYGxGROsiEEELTjSAiIiIiIiIiIu3CkUZERERERERERKSCSSMiIiIiIiIiIlLBpBEREREREREREalg0oiIiIiIiIiIiFQwaURERERERERERCqYNCIiIiIiIiIiIhVMGhERERERERERkQomjYiIiIiIiIiISAWTRkREREREREREpIJJIyIiIiIiIiIiUsGkERERERERERERqWDSiIiIiIiIiIiIVPw/9OOFZSp3FYgAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1mCOMPARISON OF METRICS\u001b[0m\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "\n",
            "\n",
            "\u001b[1mCOMPARISON OF CONFUSION MATRICES\u001b[0m\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 8 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABJ4AAAJOCAYAAAD2/c3/AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1gUV9sG8HuWsoA0C1UQUWwoii0KNlQUu6ix5NUIijEWjGLHRAVNxN6NJUbRRGJvEcVg770rdpCoYAdEERDm+4OPiSugs8iCwv3LNdebnTl75pll8/LwnDNnBFEURRAREREREREREeUxRUEHQEREREREREREhRMLT0REREREREREpBEsPBERERERERERkUaw8ERERERERERERBrBwhMREREREREREWkEC09ERERERERERKQRLDwREREREREREZFGsPBEREREREREREQawcITERERERERERFpBAtPRIQDBw5AEAQcOHCgoEPJUWJiIszNzbFmzZpP7qts2bLw9vaW3bZdu3affE5NiIqKgiAICA4OzvV7Z86cmfeBvSMsLAyGhoZ48uSJRs9DRESUW8yDPtz2c82D8psgCAgICMj1e319ffM2oPdcu3YN2trauHLlikbPQ5QbLDxRkbZ+/XoIgoAtW7ZkOVajRg0IgoD9+/dnOVamTBm4urqq7EtNTcX8+fNRt25dGBkZwdDQEHXr1sX8+fORmpqapY+yZctCEIRst1atWuXdRRYS8+bNg5GREXr06JHnfV+7dg0BAQGIiorK874Lg507d+Y60WrVqhUcHBwQFBSUt0EREdEnYx705SiKeVBISAjmzp1b0GHkq2PHjiEgIABxcXFqv9fR0RFt27bFhAkT8j4wok+kXdABEBWkhg0bAgCOHDmCTp06SfsTEhJw5coVaGtr4+jRo2jatKl07N9//8W///6r8ov/1atXaNu2LQ4ePIh27drB29sbCoUCYWFhGDp0KDZv3ozQ0FAUK1ZM5fzOzs4YMWJElrisra3z+lK/aKmpqZg3bx78/PygpaX1yf3duHEDCsV/dfdr164hMDAQbm5uKFu27Cf3n1/s7OyQlJQEHR0djZ5n586dWLRoUa6LT99//z1GjhyJwMBAGBkZ5W1wRESUa8yDvgxFNQ8KCQnBlStXMGzYsIIOBQCQlJQEbW3N/vl87NgxBAYGwtvbG6am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RURE+Y95EPOgT82D7ty5I3799deiqampqKenJ3711Vfijh07srz3zp07oru7u6hUKkULCwtx3LhxYnh4eJafQWJiovi///1PNDU1lf29GDVqlAhAnDZtmsp+BwcHEYB4586dLO95+fKl6O/vLzo4OIi6urpiqVKlRFdXV3HmzJkq39338yNRzPi51qxZU9TV1RXLly8vLl++XBwxYoSop6en0g6AOHjw4Cznzu5nMXnyZLF06dKiQqEQAYiRkZGyvz+7du0SAYi3bt366GdFlJ8EUczFqnBERPls8uTJWLlyJW7dupXj4oyUM2dnZ5iZmSE8PDzfz12zZk24ublhzpw5+X5uIiKiwoB50JfD09MTV69exa1btwrk3IIgYMuWLfl+bqIP4RpPRPRF8PPzQ2JiItauXVvQoXzWUlNTs0xXP3DgAC5evAg3N7d8jycsLAy3bt2Cv79/vp+biIiosGAe9HlKSkpSeX3r1i3s3LmzQHKuiIgI7NixA5MnT873cxN9DGc8EREVIlFRUXB3d0evXr1gbW2N69evY8mSJTAxMcGVK1dkrWtBRERERB9nZWUFb29vlCtXDvfu3cPixYuRnJyM8+fPo0KFCgUdHtFng4uLExEVIsWLF0ft2rWxfPlyPHnyBMWKFUPbtm0xdepUFp2IiIiI8lCrVq3w119/ITY2FkqlEi4uLpgyZQqLTkTv4YwnIiIiIiIiIiLSCK7xREREREREREREGsHCExERERERERERaQQLT0REREREREREpBFcXLyQ0K/pW9AhEOWrZ6cWFHQIRPnKQEfQaP9yf48knV+o0TiI8pPQwqagQyDKV0lhNws6BKJ8p6dloLG+1fk9Iobf11gcnzsWnoiIiAgQOAmaiIiISC2CZgcGCwsWnoiIiIiJExEREZG6OG4nCwtPRERExBlPREREROriwJ0sLDwRERERoNAq6AiIiIiIviwKFp7kYOGJiIiIOGJHREREpC5OGJeFhSciIiLirXZERERE6uLAnSwsPBERERETJyIiIiJ1MX2ShYUnIiIi4ownIiIiInVxjSdZWHgiIiIiLi5OREREpC4WnmRh4YmIiIh4qx0RERGRupg+ycJ59URERJRxq52cTQ1BQUGoW7cujIyMYG5uDk9PT9y4cUOljZubGwRBUNkGDBig0iY6Ohpt27aFgYEBzM3NMWrUKLx9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InUxgZKDhSciIiKCgpUnIiIiIrVwjUx5WHgiIiIiIiIiIlITb7WTh4UnIiIi4q12RERERKQRLDwRERERp4oTERERqYn5kzwsPBERERFnPBERERGpjQmUHCw8EREREQtPRERERGriw1nkYeGJiIiIOFWciIiISG3Mn+Rg4YmIiIg444mIiIhITUyf5GHhiYiIiJg4EREREamNGZQcLDwRERER8yYiIiIiNQmcMi4LC09ERETExTGJiIiI1MQ1MuURRFEUCzoIoi9RcnIygoKC4O/vD6VSWdDhEGkcv/NERJQX+PuEihp+56moY+GJKJcSEhJgYmKC+Ph4GBsbF3Q4RBrH7zwREeUF/j6hoobfeSrqFAUdABERERERERERFU4sPBERERERERERkUaw8ERERERERERERBrBwhNRLimVSkycOJELBFKRwe88ERHlBf4+oaKG33kq6ri4OBERERERERERaQRnPBERERERERERkUaw8ERERERERERERBrBwhMREREREREREWkEC09EGnL06FE4OTlBR0cHnp6eedZv2bJlMXfu3Dzrjygny5Ytg62tLRQKRZ5956KioiAIAi5cuJAn/RERUeHDHIq+dMyhiFSx8ERfFG9vbwiCgKlTp6rs37p1KwRB+KS+g4ODIQgCBEGAlpYWihcvjnr16mHSpEmIj49Xu7/hw4fD2dkZkZGRCA4O/qTYPkQQBGzdulVj/dOXJfO/EUEQoKOjAwsLC7Ro0QIrVqxAenq67H4SEhLg6+uLMWPG4MGDB+jfv79G4j1w4AAEQUBcXJxG+iciogzMobJiDkXvYg5FpDksPNEXR09PD9OmTcOLFy/yvG9jY2PExMTg/v37OHbsGPr374/Vq1fD2dkZDx8+VKuvO3fuoFmzZrCxsYGpqWmex0qUk1atWiEmJgZRUVHYtWsXmjZtiqFDh6Jdu3Z4+/atrD6io6ORmpqKtm3bwsrKCgYGBhqOmoiINI05FNGHMYci0gwWnuiL4+7uDktLSwQFBX2w3aZNm1C1alUolUqULVsWs2bN+mjfgiDA0tISVlZWqFKlCnx8fHDs2DEkJiZi9OjRUrv09HQEBQXB3t4e+vr6qFGjBjZu3Ajgv2mwz549Q9++fSEIAoKDg5GWlgYfHx/pPZUqVcK8efNUzu/m5oZhw4ap7PP09IS3t3e28ZYtWxYA0KlT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TpX/FiIjI0UA4vnz56X3TJo0SbS0tBQFQVD5rhMRUd5hDsUcij6MORSR5gii+N6NpERERERERERERHlAUdABEBERERERERFR4cTCExERERERERERaQQLT0REREREREREpBEsPBERERERERERkUaw8ERERERERERERBrBwhMREREREREREWkEC09ERERERERERKQRLDwREREREREREZFGsPBERBrh7e0NT09P6bWbmxuGDRuW73EcOHAAgiAgLi4uxzaCIGDr1q2y+wwICICzs/MnxRUVFQVBEHDhwoVP6oeIiIgKF+ZQH8YciujLw8ITURHi7e0NQRAgCAJ0dXXh4OCASZMm4e3btxo/9+bNmzF58mRZbeUkOkRERET5hTkUEVHuaRd0AESUv1q1aoWVK1ciOTkZO3fuxODBg6GjowN/f/8sbVNSUqCrq5sn5y1RokSe9ENERERUEJhDERHlDmc8ERUxSqUSlpaWsLOzw8CBA+Hu7o7t27cD+G9q9y+//AJra2tUqlQJAPDvv/+iW7duMDU1RYkSJdCxY0dERUVJfaalpWH48OEwNTVFyZIlMXr0aIiiqHLe96eJJycnY8yYMbC1tYVSqYSDgwN+//13REVFoWnTpgCA4sWLQxAEeHt7AwDS09MRFBQEe3t76Ovro0aNGti4caPKeXbu3ImKFStCX18fTZs2VYlTrjFjxqBixYowMDBAuXLlMH78eKSmpmZpt3TpUtja2sLAwADdunVDfHy8yvHly5ejSpUq0NPTQ+XKlfHrr7+qHQsRERF9HphDfRxzKCLKDgtPREWcvr4+UlJSpNd79+7FjRs3EB4ejh07diA1NRUeHh4wMjLC4cOHcfToURgaGqJVq1bS+2bNmoXg4GCsWLECR44cwfPnz7Fly5YPnrd3797466+/MH/+fERERGDp0qUwNDSEra0tNm3aBAC4ceMGYmJiMG/ePABAUFAQVq9ejSVLluDq1avw8/NDr169cPDgQQAZyV3nzp3Rvn17XLhwAf369cPYsWPV/kyMjIwQHByMa9euYd68efjtt98wZ84clTa3b9/G+vXr8ffffyMsLAznz5/HoEGDpONr1qzBhAkT8MsvvyAiIgJTpkzB+PHjsWrVKrXjISIios8Pc6ismEMRUbZEIioyvLy8xI4dO4qiKIrp6elieHi4qFQqxZEjR0rHLSwsxOTkZOk9f/zxh1ipUiUxPT1d2pecnCzq6+uLu3fvFkVRFK2srMTp06dLx1NTU0UbGxvpXKIoik2aNBGHDh0qiqIo3rhxQwQghoeHZxvn/v37RQDiixcvpH1v3rwRDQwMxGPHjqm09fHxEb/55htRFEXR399fdHR0VDk+ZsyYLH29D4C4ZcuWHI/PmDFDrF27tvR64sSJopaWlnj//n1p365du0SFQiHGxMSIoiiK5cuXF0NCQlT6mTx5suji4iKKoihGRkaKAMTz58/neF4iIiL6PDCHyh5zKCKSg2s8ERUxO3bsgKGhIVJTU5Geno7//e9/CAgIkI47OTmprElw8eJF3L59G0ZGRir9vHnzBnfu3EF8fDxiYmJQr1496Zi2tjbq1KmTZap4pgsXLkBLSwtNmjSRHfft27fx+vVrtGjRQmV/SkoKatasCQCIiIhQiQMAXFxcZJ8j07p16zB//nzcuXMHiYmJePv2LYyNjVXalClTBqVLl1Y5T3p6Om7cuAEjIyPcuXMHPj4++O6776Q2b9++hYmJidrxEBERUcFjDvVxzKGIKDssPBEVMU2bNsXixYuhq6sLa2traGur/t9AsWLFVF4nJiaidu3aWLNmTZa+zMzMchWDvr6+2u9JTEwEAISGhqokK0DGmgt55fjx4+jZsycCAwPh4eEBExMTrF27FrNmzVI71t9++y1LEqelpZVnsRIREVH+YQ71YcyhiCgnLDwRFTHFihWDg4OD7Pa1atXCunXrYG5unmXEKpOVlRVOnjyJxo0bA8gYlTp79ixq1aqVbXsnJyekp6fj4MGDcHd3z3I8c7QwLS1N2ufo6AilUono6OgcR/mqVKkiLfKZ6cSJEx+/yHccO3YMdnZ2+PHHH6V99+7dy9IuOjoaDx8+hLW1tXQehUKBSpUqwcLCAtbW1rh79y569uyp1vmJiIjo88Qc6sOYQxFRTri4OBF9UM+ePVGqVCl07NgRhw8fRmRkJA4cOIAffvgB9+/fBwAMHToUU6dOxdatW3H9+nUMGjQIcXFxOfZZtmxZeHl5oW/fvti6davU5/r16wEAdnZ2EAQBO3bswJMnT5CYmAgjIyOMHDkSfn5+WLVqFe7cuYNz585hwYIF0mKTAwYMwK1btzBq1CjcuHEDISEhCA4OVut6K1SogOjoaKxduxZ37tzB/Pnzs13kU09PD15eXrh48SIOHz6MH374Ad26dYOlpSUAIDAwEEFBQZg/fz5u3ryJy5cvY+XKlZg9e7Za8RAREdGXiTkUcygiysDCExF9kIGBAQ4dOoQyZcqgc+fOqFKlCnx8fPDmzRtp9G7EiBH49ttv4eXlBRcXFxgZGaFTp04f7Hfx4sX4+uuvMWjQIFSuXBnfffcdXr16BQAoXbo0AgMDMXbsWFhYWMDX1xcAMHnyZIwfPx5BQUGoUqUKWrVqhdDQUNjb2wPIWDNg06ZN2Lp1K2rUqIElS5ZgypQpal1vhw4d4OfnB19fXzg7O+PYsWMYP358lnYODg7o3Lkz2rRpg5YtW6J69eoqj/rt168fli9fjpUrV8LJyQlNmjRBcHCwFCsREREVbsyhmEMRUQZBzGnlOiIiIiIiIiIiok/AGU9ERERERERERKQRLDwREREREREREZFGsPBEREREREREREQawcITERERERERERFpBAtPRERERERERESkESw8ERERERERERGRRrDwREREREREREREGsHCExERERERERERaQQLT0REREREREREpBEsPBERERERERERkUaw8ERERERERERERBrBwhMREREREREREWkEC09ERERERERERKQRLDwREREREREREZFGsPBEREREREREREQawcITERERERERERFpBAtPRJ8pNzc3uLm5fbTd27dvMXr0aNja2kKhUMDT01PjsX2pEhMTYW5ujjVr1nxyX2XLloW3t7fstu3atfvkc2pCVFQUBEFAcHBwrt87c+bMvA/sHWFhYTA0NMSTJ080eh4iIvq8MBfKe8yFCp4gCAgICMj1e319ffM2oPdcu3YN2trauHLlikbPQ0ULC0/0xQoODoYgCNDT08ODBw+yHHdzc0O1atUKILL8tWLFCsyYMQNff/01Vq1aBT8/P42cJyQkBHPnztVI3/ll3rx5MDIyQo8ePfK872vXriEgIABRUVF53ndhsHPnzlwnWa1atYKDgwOCgoLyNigioi8cc6EMzIXkK4q5UGH4uanr2LFjCAgIQFxcnNrvdXR0RNu2bTFhwoS8D4yKLBae6IuXnJyMqVOnFnQYBWbfvn0oXbo05syZg2+//RZNmjTRyHm+9F/aqampmDdvHvr16wctLa1P7u/GjRv47bffpNfXrl1DYGDgZ5dsfYydnR2SkpLw7bffavQ8O3fuRGBg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AODzzz/HzJkzMWzYMEyePBnXrl3DkiVLsGjRIum4Y8eORevWrbFgwQK4ublhy5YtuHDhgtoCmtrC/ImIiKh40iR9KqjlCj7GGeMaFZ769euXa7oWERERFQMy13jS1IULF9C2bVvpdU7C5eHhgYCAAEyaNAkpKSkYOXIkEhIS0KJFCwQFBUFfX196z6ZNm+Dl5YX27dtDoVCgd+/eWLp0qbTf2NgYf/75Jzw9PeHk5IRy5cph+vTpak9uadasGTZv3oypU6fi22+/RbVq1bB7927UrVtXK+f9KuZPRERExZMmt9oV1HIFr84Yzyk05cwYHz16NAD1GeNOTk4A8p4x/t133yE9PR26uroA8p8xPm7cOOn47zJjXBBzVr18C6VSiZiYGCZOH6qUuLfHEBUngrKoR0BUuEqV02r3WUHfyYpTdPpBq+Mobpg/fdiep6QV9RCICpVKVbC3TBN9DJQ62rm4BgCnTv8tO7Z5MzvZsa/OGG/QoAEWLlyItm3bSjPG586dizlz5mD9+vXSjPErV67gxo0b0sW7zp07Iy4uTpoxPmTIEDRq1AibN28GACQmJqJGjRro2LGjNGN86NChWLRokXTx7vTp02jdujXmzJkjzRifPXs2Ll68qNHFO42fakdERETFkJZmPJV0zJ+IiIiKL209QKS4zRiXPeOJPnCc8UQlDWc8UUmj7RlPwb6y4hQd5MURfQw444lKGs54opJImzOezpyNlh3btElFrY3jQ8e/eYiIiIgznoiIiIg0JEA7M56KGxaeiIiICFCw8ERERESkCS3daVfssPBEREREzJyIiIiINKStNZ6KGxaeiIiIiLfaEREREWmIdSd5WHgiIiIiQMEF+4mIiIg0oVCw8iQHC09ERETEGU9EREREGuKtdvKw8EREREQsPBERERFpinUnWVh4IiIiIhaeiIiIiDTEGU/ysPBEREREXOOJiIiISENc40keFp6IiIiIM56IiIiINMSykzzMMmVYvXo1bG1toVAosHjx4gLp8969exAEAeHh4QXSHxER0XsRBHkbkQaYQxERUXEmCILsrSQrtoWnwYMHSz9gXV1dWFpaokOHDli7di2ysrJk95OUlAQvLy9MnjwZDx48wMiRI7Uy3qNHj0IQBCQkJGilf8rb+bBwfDl2Clp07IkaDVvh0JETavv/DDmGoV95o0nbrqjRsBVu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SDMC8ydZWHgiIiIizngiIiIiIq1g4YmIiIjAGU9EREREmuF1O3lYeCIiIiJmTkRERESkFSw8ERERESAoinoERERERB8VgRfuZGHhiYiIiMBb7YiIiIg0xPRJFhaeiIiIiLfaEREREWmI2ZM8LDwRERERmDoRERERaYgX7mRh4YmIiIi4RgERERGRhpg9ycPCExEREYGpExEREZGGmD7JwsITERERcao4ERERkYYEVp5kYeGJiIiIwEt2RERERBpi+iQLC09ERETEGU9EREREGmL2JA8LT0RERAQIiqIeAREREdHHhRfuZGHhiYiIiMBrdkRERESaYfYkDwtPRERExCt2RERERJpi+iQLC09EREQEZk5EREREmmH2JA8LT0RERMTMiYiIiEhTnDEuCwtPRERExMXFiYiIiDTEupM8LDwREREROOWJiIiIiLSBhSciIiLiJTsiIiIiDQnMn2Rh4YmIiIjAGU9EREREpA2CKIpiUQ+C6GOUmpoKf39/+Pj4QKVSFfVwiLSO33kiIioI/H1CJQ2/81TSsfBE9I6SkpJgbGyMxMREGBkZFfVwiLSO33kiIioI/H1CJQ2/81TS8RE2RERERERERESkFSw8ERERERERERGRVrDwREREREREREREWsHCE9E7UqlUmDFjBhcIpBKD33kiIioI/H1CJQ2/81TScXFxIiIiIiIiIiLSCs54IiIiIiIiIiIirWDhiYiIiIiIiIiItIKFJyItOXXqFBwcHKCrqwt3d/cC67dSpUpYvHhxgfVHlJ/Vq1fD1tYWCoWiwL5z9+7dgyAICA8PL5D+iIio+GEORR875lBE6lh4oo/K4MGDIQgC5syZo9a+e/duCILwXn0HBARAEAQIggClUglTU1M0adIEs2bNQmJiosb9eXt7w9HREVFRUQgICHivsb2JIAjYvXu31vqnj0vOnxFBEKCrqwtLS0t06NABa9euRVZWlux+kpKS4OXlhcmTJ+PBgwcYOXKkVsZ79OhRCIKAhIQErfRPRETZmEPlxhyKXsUcikh7WHiij46+vj7mzp2Lp0+fFnjfRkZGiImJwf3793H69GmMHDkSGzZsgKOjIx4+fKhRX5GRkWjXrh0qVKgAExOTAh8rUX46deqEmJgY3Lt3DwcOHEDbtm0xduxYdO3aFRkZGbL6iI6ORnp6Otzc3GBtbY1SpUppedRE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evRo0czMTLSwsBD9/f3FHj16iB4eHlKMnZ2duGjRIun1nj17xKpVq4o6OjqinZ3dG8+Rij8PDw/pe6yjoyOam5uLLi4u4tq1a8XMzEwpLikpSRwzZoxoY2Mj6urqira2tuKAAQPE6OhoURRF8dKlSyIAMSoqSnpPVFSU2LZtW9HAwEC0tbUVly9fLrZu3VocO3asFPPgwQOxY8eOYunSpcVq1aqJ+/fvV/uzEBUVJQIQL126JL1n1qxZopWVlSgIgtp3nYiICg5zKOZQ9GbMoYi0RxDF124kJSIiIiIiIiIiKgCKoh4AEREREREREREVTyw8ERERERERERGRVrDwREREREREREREWsHCExERERERERERaQULT0REREREREREpBUsPBERERERERERkVaw8ERERERERERERFrBwhMREREREREREWkFC09EpBWDBw+Gu7u79LpNmzYYN25coY/j6NGjEAQBCQkJ+cYIgoDdu3fL7tPX1xeOjo7vNa579+5BEASEh4e/Vz9ERERUvDCHejPmUEQfHxaeiEqQwYMHQxAECIIAPT09VK1aFbNmzUJGRobWj71z5074+fnJipWT6BAREREVFuZQRETvTqeoB0BEhatTp05Yt24dUlNTsX//fnh6ekJXVxc+Pj65YtPS0qCnp1cgxzUzMyuQfoiIiIiKAnMoIqJ3wxlPRCWMSqWClZUV7OzsMHr0aLi4uGDPnj0A/pva/cMPP8DGxgY1atQAAPzzzz/47LPPYGJiAjMzM/To0QP37t2T+szMzIS3tzdMTExQtmxZTJo0CaIoqh339WniqampmDx5MmxtbaFSqVC1alX8+uuvuHfvHtq2bQsAMDU1hSAIGDx4MAAgKysL/v7+sLe3h4GBAerXr48dO3aoHWf//v2oXr06DAwM0LZtW7VxyjV58mRUr14dpUqVQuXKlTFt2jSkp6fnivv5559ha2uLUqVK4bPPPkNiYqLa/jVr1qBWrVrQ19dHzZo18dNPP2k8FiIiIvowMId6O+ZQRJQXFp6ISjgDAwOkpaVJr0NCQhAREYHg4GDs27cP6enpcHV1RZkyZXDixAmcOnUKhoaG6NSpk/S+BQsWICAgAGvXrsXJkycRHx+PXbt2vfG4gwYNwm+//YalS5fi5s2btNtSogAABh9JREFU+Pnnn2FoaAhbW1v8/vvvAICIiAjExMRgyZIlAAB/f39s2LABq1atwvXr1zF+/HgMHDgQx44dA5Cd3PXq1QvdunVDeHg4hg8fjilTpmj8mZQpUwYBAQG4ceMGlixZgl9++QWLFi1Si7lz5w62bduGvXv3IigoCJcuXcJXX30l7d+0aROmT5+OH374ATdv3sTs2bMxbdo0rF+/XuPxEBER0YeHOVRuzKGIKE8iEZUYHh4eYo8ePURRFMWsrCwxODhYVKlU4oQJE6T9lpaWYmpqqvSejRs3ijVq1BCzsrKkttTUVNHAwEA8ePCgKIqiaG1tLc6bN0/an56eLlaoUEE6liiKYuvWrcWxY8eKoiiKERERIgAxODg4z3EeOXJEBCA+ffpUanv58qVYqlQp8fTp02qxw4YNE/v37y+Koij6+PiItWvXVts/efLkXH29DoC4a9eufPfPnz9fdHJykl7PmDFDVCqV4v3796W2AwcOiAqFQoyJiRFFURSrVKkibt68Wa0fPz8/0dnZWRRFUYyKihIBiJcuXcr3uERERPRhYA6VN+ZQRCQH13giKmH27dsHQ0NDpKenIysrC59//jl8fX2l/Q4ODmprEly+fBl37txBmTJl1Pp5+fIlIiMjkZiYiJiYGDRp0kTap6Ojg0aNGuWaKp4jPDwcSqUSrVu3lj3uO3fu4Pnz5+jQoYNae1paGho0aAAAuHnzpto4AMDZ2Vn2MXJs3boVS5cuRWRkJJKTk5GRkQEjIyO1mIoVK6J8+fJqx8nKykJERATKlCmDyMhIDBs2DCNGjJBiMjIyYGxsrPF4iIiIqOgxh3o75lBElBcWnohKmLZt22LlypXQ09ODjY0NdHTU/xooXbq02uvk5GQ4OTlh06ZNufoyNzd/pzEYGBho/J7k5GQAQGBgoFqyAmSvuVBQQkNDMWDAAMycOROurq4wNjbGli1bsGDBAo3H+ssvv+RK4pRKZYGNlYiIiAoPc6g3Yw5FRPlh4YmohCldujSqVq0qO75hw4bYunUrLCwscl2xymFtbY2zZ8+iVatWALKvSoWFhaFhw4Z5xjs4OCArKwvHjh2Di4tLrv05VwszMzOlttq1a0OlUiE6Ojrfq3y1atWSFvnMcebMmbef5CtOnz4NOzs7fPfdd1Lb33//nSsuOjoaDx8+hI2NjXQchUKBGjVqwNLSEjY2Nrh79y4GDBig0fGJiIjow8Qc6s2YQxFRfri4OBG90YABA1CuXDn06NEDJ06cQFRUFI4ePYqvv/4a9+/fBwCMHTsWc+bMwe7du3Hr1i189dVXSEhIyLfPSpUqwcPDA0OHDsXu3bulPrdt2wYAsLOzgyAI2LdvHx4/fozk5GSUKVMGEyZMwPjx47F+/XpERkbi4sWLWLZsmbTY5Jdffonbt29j4sSJiIiIwObNmxEQEKDR+VarVg3R0dHYsmULIiMjsXTp0jwX+dTX14eHhwcuX76MEydO4Ouvv8Znn30GKysrAMDMmTPh7++PpUuX4q+//sLVq1exbt06LFy4UKPxEBER0ceJORRzKCLKxsITEb1RqVKlcPz4cVSsWBG9evVCrVq1MGzYMLx8+VK6evfNN9/giy++gIeHB5ydnVGmTBn07Nnzjf2uXLkSffr0wVdffYWaNWtixIgRSElJAQCUL18eM2fOxJQpU2BpaQkvLy8AgJ+fH6ZNmwZ/f3/UqlULnTp1QmBgIOzt7QFkrxnw+++/Y/fu3ahfvz5WrVqF2bNna3S+3bt3x/jx4+Hl5QVHR0ecPn0a06ZNyxVXtWpV9OrVC126dEHHjh1Rr149tUf9Dh8+HGvWrMG6devg4OCA1q1bIyAgQBorERERFW/MoZhDEVE2Qcxv5ToiIiIiIiIiIqL3wBlPRERERERERESkFSw8ERERERERERGRVrDwREREREREREREWsHCExERERERERERaQULT0REREREREREpBUsPBERERERERERkVaw8ERERERERERERFrBwhMREREREREREWkFC09ERERERERERKQVLDwREREREREREZFWsPBERERERERERERawcITERERERERERFpxf8BJ/QBTTXBpGwAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1mCOMPARISON OF ROC CURVES\u001b[0m\n",
            "\n",
            "\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "#------------------------------------- CLASS DISTRIBUTION ------------------------------------------\n",
        "print(\"\\033[1mCLASS DISTRIBUTION\\033[0m\")\n",
        "print(\"\\n\\n\\n\")\n",
        "\n",
        "# Get class distribution\n",
        "class_counts = df_normal['SeriousDlqin2yrs'].value_counts()\n",
        "class_labels = ['No Default', 'Default']\n",
        "class_sizes = class_counts.values\n",
        "\n",
        "# Plotting pie chart\n",
        "plt.figure(figsize=(6, 4))\n",
        "plt.pie(class_sizes, labels=class_labels, autopct='%1.1f%%', startangle=140, colors=['#ff9999','#66b3ff'])\n",
        "plt.title('Class Distribution')\n",
        "plt.show()\n",
        "\n",
        "#-------------------------------------------------------------------------------\n",
        "\n",
        "predictions_woe = {\n",
        "    \"WOE values (with weights)\": y_pred_with_weight,\n",
        "    \"WOE values (without weights)\": y_pred_no_weight,\n",
        "\n",
        "}\n",
        "predictions_normal = {\n",
        "    \"Normal features (with weights)\": y_pred_normal_with_weight,\n",
        "    \"Normal features (without weights)\": y_pred_normal_no_weight\n",
        "}\n",
        "\n",
        "# Define colormaps for each plot\n",
        "colormaps_woe = {\n",
        "    \"WOE values (with weights)\": \"Blues\",\n",
        "    \"WOE values (without weights)\": \"Greens\",\n",
        "}\n",
        "colormaps_normal = {\n",
        "    \"Normal features (with weights)\": \"Oranges\",\n",
        "    \"Normal features (without weights)\": \"Purples\"\n",
        "}\n",
        "\n",
        "#------------------------------------- CLASSIFICATION REPORTS ------------------------------------------\n",
        "\n",
        "print(\"\\033[1mCOMPARISON OF CLASSIFICATION REPORTS\\033[0m\")\n",
        "print(\"\\n\\n\\n\")\n",
        "\n",
        "report_woe_weight = classification_report(y_test, y_pred_with_weight, output_dict=True)\n",
        "report_woe_no_weight = classification_report(y_test, y_pred_no_weight, output_dict=True)\n",
        "report_normal_weight = classification_report(y_normal_test, y_pred_normal_with_weight, output_dict=True)\n",
        "report_normal_no_weight = classification_report(y_normal_test, y_pred_normal_no_weight, output_dict=True)\n",
        "\n",
        "# Convert reports to DataFrames\n",
        "def report_to_df(report):\n",
        "    df = pd.DataFrame(report).transpose()\n",
        "    return df\n",
        "\n",
        "df_woe_weight = report_to_df(report_woe_weight)\n",
        "df_woe_no_weight = report_to_df(report_woe_no_weight)\n",
        "df_normal_weight = report_to_df(report_normal_weight)\n",
        "df_normal_no_weight = report_to_df(report_normal_no_weight)\n",
        "\n",
        "# Create a dictionary of DataFrames and model names\n",
        "reports_woe = {\n",
        "    \"WOE values (with weights)\": df_woe_weight,\n",
        "    \"WOE values (without weights)\": df_woe_no_weight,\n",
        "}\n",
        "\n",
        "reports_normal = {\n",
        "    \"Normal features (with weights)\": df_normal_weight,\n",
        "    \"Normal features (without weights)\": df_normal_no_weight\n",
        "}\n",
        "\n",
        "# Set up the plot grid\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 7))\n",
        "axes = axes.ravel()\n",
        "\n",
        "# Plot each classification report\n",
        "for idx, (model_name, df) in enumerate(reports_woe.items()):\n",
        "    sns.heatmap(df, annot=True, fmt=\".2f\", cmap=colormaps_woe[model_name], ax=axes[idx], vmin=0, vmax=1)\n",
        "    axes[idx].set_title(model_name)\n",
        "    axes[idx].set_xlabel('Metrics')\n",
        "    axes[idx].set_ylabel('Classes')\n",
        "\n",
        "# Plot each classification report\n",
        "for idx, (model_name, df) in enumerate(reports_normal.items()):\n",
        "    sns.heatmap(df, annot=True, fmt=\".2f\", cmap=colormaps_normal[model_name], ax=axes[idx+2], vmin=0, vmax=1)\n",
        "    axes[idx+2].set_title(model_name)\n",
        "    axes[idx+2].set_xlabel('Metrics')\n",
        "    axes[idx+2].set_ylabel('Classes')\n",
        "\n",
        "# Remove any empty subplots (if any)\n",
        "for ax in axes[len(reports_woe) + len(reports_normal):]:\n",
        "    fig.delaxes(ax)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "#------------------------------------- COMPARISON OF METRICS ------------------------------------------\n",
        "\n",
        "print(\"\\033[1mCOMPARISON OF METRICS\\033[0m\")\n",
        "print(\"\\n\\n\\n\")\n",
        "\n",
        "# Initialize data structures\n",
        "metrics = {\n",
        "    'Model': [],\n",
        "    'Precision Class 0': [],\n",
        "    'Precision Class 1': [],\n",
        "    'Recall Class 0': [],\n",
        "    'Recall Class 1': [],\n",
        "    'F1 Score Class 0': [],\n",
        "    'F1 Score Class 1': [],\n",
        "    'Accuracy': []\n",
        "}\n",
        "\n",
        "# Calculate metrics for each model\n",
        "for model_name, y_pred in predictions_woe.items():\n",
        "    report = classification_report(y_test, y_pred, output_dict=True)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    metrics['Model'].append(model_name)\n",
        "    metrics['Precision Class 0'].append(report['0']['precision'])\n",
        "    metrics['Precision Class 1'].append(report['1']['precision'])\n",
        "    metrics['Recall Class 0'].append(report['0']['recall'])\n",
        "    metrics['Recall Class 1'].append(report['1']['recall'])\n",
        "    metrics['F1 Score Class 0'].append(report['0']['f1-score'])\n",
        "    metrics['F1 Score Class 1'].append(report['1']['f1-score'])\n",
        "    metrics['Accuracy'].append(accuracy)\n",
        "\n",
        "for model_name, y_pred in predictions_normal.items():\n",
        "    report = classification_report(y_normal_test, y_pred, output_dict=True)\n",
        "    accuracy = accuracy_score(y_normal_test, y_pred)\n",
        "\n",
        "    metrics['Model'].append(model_name)\n",
        "    metrics['Precision Class 0'].append(report['0']['precision'])\n",
        "    metrics['Precision Class 1'].append(report['1']['precision'])\n",
        "    metrics['Recall Class 0'].append(report['0']['recall'])\n",
        "    metrics['Recall Class 1'].append(report['1']['recall'])\n",
        "    metrics['F1 Score Class 0'].append(report['0']['f1-score'])\n",
        "    metrics['F1 Score Class 1'].append(report['1']['f1-score'])\n",
        "    metrics['Accuracy'].append(accuracy)\n",
        "\n",
        "df_metrics = pd.DataFrame(metrics)\n",
        "\n",
        "# Plotting\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 10))\n",
        "axes = axes.ravel()\n",
        "\n",
        "# Plot Precision\n",
        "df_metrics.set_index('Model')[['Precision Class 0', 'Precision Class 1']].plot(kind='bar', ax=axes[0], color=['pink', 'purple'])\n",
        "axes[0].set_title('Precision for Class 0 and Class 1')\n",
        "axes[0].set_xticklabels(df_metrics['Model'], rotation=45, ha='right')\n",
        "\n",
        "# Plot Recall\n",
        "df_metrics.set_index('Model')[['Recall Class 0', 'Recall Class 1']].plot(kind='bar', ax=axes[1], color=['yellow', 'orange'])\n",
        "axes[1].set_title('Recall for Class 0 and Class 1')\n",
        "axes[1].set_xticklabels(df_metrics['Model'], rotation=45, ha='right')\n",
        "\n",
        "# Plot F1 Score\n",
        "df_metrics.set_index('Model')[['F1 Score Class 0', 'F1 Score Class 1']].plot(kind='bar', ax=axes[2], color=['cyan', 'blue'])\n",
        "axes[2].set_title('F1 Score for Class 0 and Class 1')\n",
        "axes[2].set_xticklabels(df_metrics['Model'], rotation=45, ha='right')\n",
        "\n",
        "# Plot Accuracy\n",
        "df_metrics.set_index('Model')['Accuracy'].plot(kind='bar', ax=axes[3], color='green')\n",
        "axes[3].set_title('Accuracy')\n",
        "axes[3].set_xticklabels(df_metrics['Model'], rotation=45, ha='right')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "#------------------------------------- CONFUSION MATRICES ------------------------------------------\n",
        "\n",
        "print(\"\\n\\n\\n\")\n",
        "print(\"\\033[1mCOMPARISON OF CONFUSION MATRICES\\033[0m\")\n",
        "print(\"\\n\\n\\n\")\n",
        "\n",
        "# Plotting confusion matrices\n",
        "fig, axes = plt.subplots(2, 2, figsize=(12, 6))\n",
        "axes = axes.ravel()\n",
        "\n",
        "for idx, (model_name, preds) in enumerate(predictions_woe.items()):\n",
        "    cm = confusion_matrix(y_test, preds)\n",
        "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=colormaps_woe[model_name], ax=axes[idx])\n",
        "    axes[idx].set_title(model_name)\n",
        "    axes[idx].set_xlabel('Predicted label')\n",
        "    axes[idx].set_ylabel('True label')\n",
        "    axes[idx].set_xticklabels(['No Default', 'Default'])\n",
        "    axes[idx].set_yticklabels(['No Default', 'Default'], rotation=0)\n",
        "\n",
        "for idx, (model_name, preds) in enumerate(predictions_normal.items()):\n",
        "    cm = confusion_matrix(y_normal_test, preds)\n",
        "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=colormaps_normal[model_name], ax=axes[idx+2])\n",
        "    axes[idx+2].set_title(model_name)\n",
        "    axes[idx+2].set_xlabel('Predicted label')\n",
        "    axes[idx+2].set_ylabel('True label')\n",
        "    axes[idx+2].set_xticklabels(['No Default', 'Default'])\n",
        "    axes[idx+2].set_yticklabels(['No Default', 'Default'], rotation=0)\n",
        "\n",
        "# Remove any empty subplots (if any) # REMOVE +1 AFTER GRADIENT DESCENT IS ADDED\n",
        "for ax in axes[len(predictions_woe) + len(predictions_normal)+1:]:\n",
        "    fig.delaxes(ax)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "#------------------------------------- COMPARISON OF ROC CURVES ------------------------------------------\n",
        "\n",
        "print(\"\\033[1mCOMPARISON OF ROC CURVES\\033[0m\")\n",
        "print(\"\\n\\n\\n\")\n",
        "\n",
        "# Compute ROC curve and AUC for each model\n",
        "def compute_roc_curve(y_test, pred_prob1):\n",
        "    fpr, tpr, _ = roc_curve(y_test, pred_prob1[:,1],pos_label=1)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    return fpr, tpr, roc_auc\n",
        "\n",
        "\n",
        "pred_prob_weight = lr_with_weight.predict_proba(X_test)\n",
        "pred_prob_no_weight = lr_no_weight.predict_proba(X_test)\n",
        "pred_prob_weight_norm = lr_norm_no_weight.predict_proba(X_normal_test)\n",
        "pred_prob_no_weight_norm = lr_norm_with_weight.predict_proba(X_normal_test)\n",
        "\n",
        "\n",
        "roc_data = {\n",
        "    \"WOE values (with weights)\": compute_roc_curve(y_test, pred_prob_weight),\n",
        "    \"WOE values (without weights)\": compute_roc_curve(y_test, pred_prob_no_weight),\n",
        "    \"Normal features (with weights)\": compute_roc_curve(y_normal_test, pred_prob_weight_norm),\n",
        "    \"Normal features (without weights)\": compute_roc_curve(y_normal_test, pred_prob_no_weight_norm)\n",
        "}\n",
        "\n",
        "# Plotting ROC curves\n",
        "plt.figure(figsize=(7, 5))\n",
        "\n",
        "for model_name, (fpr, tpr, roc_auc) in roc_data.items():\n",
        "    plt.plot(fpr, tpr, label=f'{model_name} (AUC = {roc_auc:.2f})')\n",
        "\n",
        "plt.plot([0, 1], [0, 1], 'k--', label='Random Guessing')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "plt.legend(loc='lower right')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "k2jBVLi2qvGh",
      "metadata": {
        "id": "k2jBVLi2qvGh"
      },
      "source": [
        "### **Conclusion and Reasoning**\n",
        "The dataset is highly imbalanced, with class 0 (\"No Default\") making up 93.4% of the data and class 1 (\"Default\") only 6.6%. This imbalance significantly influences the performance of the model.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### **Model Performance:**\n",
        "\n",
        "**F1 Score**:\n",
        "**In terms of the F1 Score, the Logistic Regression model utilizing WOE values (with Weightage) is the best in this scenario. (F1 Score = 0.39)**\n",
        "\n",
        "\n",
        "**Class 0 (No Default)**: The F1 score for class 0 is 0.96, indicating that the model performs exceptionally well in predicting \"No Default\" cases. This high F1 score is due to the abundance of class 0 samples in the training data, allowing the model to learn and generalize well for this class.\n",
        "**Class 1 (Default)**: The F1 score for class 1 is 0.39, which is relatively low. This lower score is attributed to the scarcity of class 1 samples. With fewer \"Default\" cases to learn from, the model struggles to generalize as effectively, resulting in poorer performance.\n",
        "\n",
        "**Accuracy**:\n",
        "\n",
        "The overall accuracy is good in all models. However, accuracy alone can be misleading in the context of imbalanced datasets. Given that 93% of the data belongs to class 0, a model that predicts \"No Default\" for all instances would still achieve 93% accuracy without providing useful predictions for class 1.\n",
        "\n",
        "#### **Reasoning**:\n",
        "\n",
        "##### **Class Imbalance Impact**:\n",
        "\n",
        "* The significant class imbalance causes the model to be biased towards the majority class (class 0). This is because the model aims to minimize the overall error, which it can achieve more easily by correctly predicting the majority class.\n",
        "* Although class weighting helps to some extent by penalizing misclassifications of the minority class more heavily, the limited number of class 1 samples restricts the model's ability to learn diverse patterns for \"Default\" cases.\n",
        "\n",
        "##### **Weight of Evidence (WOE) Transformation**:\n",
        "\n",
        "* The use of WOE transformation helps to handle categorical variables and improve the model’s interpretability and predictive power. By using WOE, we can transform categorical variables into numerical ones, which logistic regression can handle more effectively.\n",
        "* Despite this advantage, the inherent imbalance in the dataset still hampers the model's performance for class 1. WOE transformation enhances the model's ability to differentiate between classes, but it cannot fully compensate for the lack of sufficient class 1 samples.\n",
        "\n",
        "#####**Class Weighting**:\n",
        "\n",
        "* Implementing class weighting in logistic regression attempts to balance the learning process by assigning higher weights to the minority class (class 1) and lower weights to the majority class (class 0). This technique helps to some extent, as seen in the improved F1 score for class 1 compared to an unweighted approach.\n",
        "* However, the improvement is limited because the fundamental issue of class imbalance still persists. The model's performance for class 1 can only improve significantly with more representative samples of the minority class.\n",
        "\n",
        "#### **Summary**:\n",
        "\n",
        "* The high accuracy (93%) reflects the model's proficiency in predicting the\n",
        "majority class (No Default). However, this metric alone is insufficient to gauge the model's overall performance due to the imbalance.\n",
        "* The disparity in F1 scores (0.96 for class 0 and 0.37 for class 1) highlights the model's struggle with minority class prediction. This discrepancy is a common challenge when dealing with imbalanced datasets.\n",
        "* While WOE transformation and class weighting help improve the model's performance for the minority class, they cannot fully address the imbalance issue. Collecting more data for the minority class may yield better results."
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}